###############################################################################
# Control.lib                                          Version : 1.1.2.3      #
#                                                                             #
# Creation Date : 25/11/2006                                                  #
# Team          : Only me after all                                           #
# Support mail  : arnaud@crampet.net                                          #
# Author        : Arnaud Crampet                                              #
#                                                                             #
# Subject : This library provide base control and error messaging runtime     #
#                                                                             #
###############################################################################
####
# INFO



function CTRL_Stop_point
{
############ STACK_TRACE_BUILDER #####################
Function_Name="${0}"
Function_PATH="${Function_PATH}/${Function_Name}"
######################################################
MSG_DISPLAY "Debug4" "Current Stack : [ ${Function_PATH} ] "

if [ "${Can_Stop_level}" = "${Stop_Level}" ]
   then
        MSG_DISPLAY "Info" "Stop requested by configuration : Stoped at ${Stop_Level} "
            exit 0
fi
############### Stack_TRACE_BUILDER ################
Function_PATH="$( dirname ${Function_PATH} )"
####################################################
}

################## Control execution Runtime

function CTRL_Result_func
{
#|# Var to set  :
#|# CRF_Result_Action             : Use this var to set The las action returne code         ( Mandatory )
#|# CRF_Generic_Base_MSG          : use this var to set base message of control             ( Mandatory )
#|# CRF_Generic_Base_MSG_ERR      : Use this var to set additional iformation on error      ( Mandatory )
#|# CRF_Result_ERR_Level          : Use this var to set the level of test severity on fail  ( Mandatory )
#|# CRF_Action_ONFAIL             : Use this var to set and action to do after CTRL fail    (  OPTIONAL )
#|# CRF_Action_ONOK               : Use this var to set and action to do after CTRL is OK   (  OPTIONAL )
#|# ${1}                          : Use this var to set [ CRF_Result_Action ]
#|# ${2}                          : Use this var to set [ CRF_Generic_Base_MSG ]
#|# ${3}                          : Use this var to set [ CRF_Generic_Base_MSG_ERR ]
#|# ${4}                          : Use this var to set [ CRF_Result_ERR_Level ]
#|# ${5}                          : Use this var to set [ CRF_Action_ONFAIL ]
#|# ${6}                          : Use this var to set [ CRF_Action_ONOK ]
#|#
#|# Base usage  : CTRL_Result_func "${?}" "Generic_Base_Param_MSG" "Generic_Base_Param_MSG_ERR" "Result_ERR_Level" "On fail action" "on success action"
#|#
#|# Description : This function is used to check result of a past action and choose action
#|#
#|# Send Back   : Message / Exit / function
############ STACK_TRACE_BUILDER #####################
Function_Name="${0}"
Function_PATH="${Function_PATH}/${Function_Name}"
######################################################
MSG_DISPLAY "Debug4" "Current Stack : [ ${Function_PATH} ] "

CRF_Result_Action=${1}
CRF_Generic_Base_MSG=${2}
CRF_Generic_Base_MSG_ERR=${3}
CRF_Result_ERR_Level=${4}
CRF_Action_ONFAIL=${5}
CRF_Action_ONOK=${6}


if [ "${CRF_Result_Action}" = "0" ]
   then
        MSG_DISPLAY "Info" "${CRF_Generic_Base_MSG}  [ OK  ] "
        if ! [ -z "${CRF_Action_ONOK}" ]
              then
                  _Ido="${CRF_Action_ONOK}"
                  CRF_Action_ONOK=""
                  ${_Ido}
        fi
   else
        MSG_DISPLAY "ErrorN" "${CRF_Generic_Base_MSG} ${CRF_Generic_Base_MSG_ERR} [ ERROR  ] " "${CRF_Result_ERR_Level}"
        if ! [ -z "${CRF_Action_ONFAIL}" ]
              then
              	   _Ido="${CRF_Action_ONFAIL}"
              	   CRF_Action_ONFAIL=""    
                   ${_Ido}
        fi
fi
Generic_Base_Param_MSG_ERR=""
CRF_Generic_Base_MSG=""
############### Stack_TRACE_BUILDER ################
Function_PATH="$( dirname ${Function_PATH} )"
####################################################
}



###############  System check

function CTRL_USER_EXIST
{
#|# Base_User_To_Check : Use this var to set the username to check
#|# Returne_Code_CTRL_USER_EXIST : This var is used to send back information of result of control
#|# Basic usage :
#|#               Base_User_To_Check="My_account"
#|#               CTRL_USER_EXIST
############ STACK_TRACE_BUILDER #####################
Function_Name="${0}"
Function_PATH="${Function_PATH}/${Function_Name}"
######################################################
MSG_DISPLAY "Debug4" "Current Stack : [ ${Function_PATH} ] "

USR_EXTRACTED=$(cat /etc/passwd | grep ${Base_User_To_Check} | awk -F: '{ print $1 }')
if [ "${USR_EXTRACTED}" = "${Base_User_To_Check}" ]
   then
        MSG_DISPLAY "Debug2" "USER ${Base_User_To_Check} : [ ALREADY PRESENT ] "
        Returne_Code_CTRL_USER_EXIST="OK"
   else
        MSG_DISPLAY "Debug2" "USER ${Base_User_To_Check} : [ NOT PRESENT ] "
        Returne_Code_CTRL_USER_EXIST="NOK"
fi
############### Stack_TRACE_BUILDER ################
Function_PATH="$( dirname ${Function_PATH} )"
####################################################

}

function CTRL_GROUP_EXIST
{
#|# Base_Group_To_Check : Use this var to set the group name to check
#|# Returne_Code_CTRL_GROUP_EXIST : This var is used to send back information of result of control
#|# Basic usage :
#|#               Base_User_To_Check="My_group"
#|#               Base_Group_To_Check
############ STACK_TRACE_BUILDER #####################
Function_Name="${0}"
Function_PATH="${Function_PATH}/${Function_Name}"
######################################################
MSG_DISPLAY "Debug4" "Current Stack : [ ${Function_PATH} ] "

USR_EXTRACTED=$(cat /etc/group | grep ${Base_Group_To_Check} | awk -F: '{ print $1 }')
if [ "${USR_EXTRACTED}" = "${Base_User_To_Check}" ]
   then
                MSG_DISPLAY "Debug2" "USER ${Base_Group_To_Check} : [ ALREADY PRESENT ] "
        Returne_Code_CTRL_GROUP_EXIST="OK"
   else
        MSG_DISPLAY "Debug2" "USER ${Base_Group_To_Check} : [ NOT PRESENT ] "
        Returne_Code_CTRL_GROUP_EXIST="NOK"
fi

############### Stack_TRACE_BUILDER ################
Function_PATH="$( dirname ${Function_PATH} )"
####################################################
}

function Empty_Var_Control
{
#|# Var to set  :
#|# EVC_Var_To_Test       : Use this var to set the path to test                                 ( Mandatory )
#|# EVC_Var_Name_To_Test  : Use this var to set the name of the var to test for display messages ( Mandatory )
#|# EVC_Type_Of_ERR       : Use this var to set the severity of an empty vars                    ( Mandatory )
#|# EVC_Level_Of_ERR      : Use this var to set the severity level of an empty vars              ( Mandatory )
#|# EVC_MSG_add           : Use this var to set complementary message                            ( OPTIONAL )
#|# EVC_Action_ONFAIL     : Use this var to set anb action to do after CTRL fail                 ( OPTIONAL )
#|# EVC_Action_ONOK       : Use this var to set anb action to do after CTRL is OK                ( OPTIONAL )
#|# ${1}                  : Used to set [ Base_Var_to_test ]
#|# ${2}                  : Used to set [ Base_Var_Name_To_Test ]
#|# ${3}                  : Used to set [ Type_Of_ERR ]
#|# ${4}                  : Used to set [ Level_Of_ERR ]
#|# ${5}                  : Used to set [ EVC_MSG_add ]
#|# ${6}                  : Used to set [ Action_ONFAIL ]
#|# ${7}                  : Used to set [ Action_ONOK ]
#|#
#|# Base usage  : Empty_Var_Control "My_VAR" "My_Var_Name" "ERR_type" "Level_Of_ERR" [ "MSG_add" "Action_ONFAIL" "Action_ONOK" ]
#|#
#|# Description : This function is used to check if a var is empty
#|#
#|# Send Back   : Send back result of check
############ STACK_TRACE_BUILDER #####################
Function_Name="${0}"
Function_PATH="${Function_PATH}/${Function_Name}"
######################################################
MSG_DISPLAY "Debug4" "Current Stack : [ ${Function_PATH} ] "

EVC_Var_To_Test="${1}"
EVC_Var_Name_To_Test="${2}"
EVC_Type_Of_ERR="${3}"
EVC_Level_Of_ERR="${4}"
EVC_MSG_add="${5}"
EVC_Action_ONFAIL="${6}"
EVC_Action_ONOK="${7}"

if [ -z "${EVC_Var_To_Test}" ]
   then
           MSG_DISPLAY "${EVC_Type_Of_ERR}" " Error ON VAR ${EVC_Var_Name_To_Test}  : [ Not Set ] ${MSG_Complement}" "${EVC_Level_Of_ERR}"
           if ! [ -z "${EVC_Action_ONFAIL}" ]
              then
                   ${EVC_Action_ONFAIL}
           fi

   else
       MSG_DISPLAY "Debug6" " Value of ${EVC_Var_Name_To_Test}  : [ Value is ${EVC_Var_To_Test} ]"
       if ! [ -z "${EVC_Action_ONOK}" ]
          then
              ${EVC_Action_ONOK}
       fi
fi

Action_ONFAIL=""
Action_ONOK=""
############### Stack_TRACE_BUILDER ################
Function_PATH="$( dirname ${Function_PATH} )"
####################################################

}


############################## Common test for directory and files ############

function IS_Writable
{
#|# Base_element_To_TEST : use this var to set which file to controle or create if not present
#|# Base_Severity        : Use this var to set the severity of the erro ifthe element is not
#|#                        writable
#|# ${1}                 : use thi var to set Base_element_To_TEST
#|# ${2}                 : Use this var to set Base_Severity The severity is from 0 ( Warning )
#|#                        to 8 ( 1 to 8 exit code)
#|# Basic usage :
#|#               IS_Writable "My element" " Severity"

############ STACK_TRACE_BUILDER #####################
Function_Name="${0}"
Function_PATH="${Function_PATH}/${Function_Name}"
######################################################
MSG_DISPLAY "Debug4" "Current Stack : [ ${Function_PATH} ] "

Base_element_To_TEST="${1}"
Base_Severity="${2}"


if [ -w "${Base_element_To_TEST}" ]
   then
        Type_Of_element="$(stat -c  %F ${Base_element_To_TEST} )"
        MSG_DISPLAY "Debug2" " the  ${Type_Of_element} ${Base_element_To_TEST} is : [ WRITABLE ] "
   else
       Type_Of_element="$(stat -c  %F ${Base_element_To_TEST} )"
       Severity_Exit "${Base_Severity}" "the  ${Type_Of_element} ${Base_element_To_TEST} is : [ NOT WRITABLE ] "

fi

############### Stack_TRACE_BUILDER ################
Function_PATH="$( dirname ${Function_PATH} )"
####################################################
}

function Control_Check_wget_status
{
#|# Var to set  : None
#|#
#|# Base usage  : Control_Check_wtget_status
#|#
#|# Description : This function check if you have Wget activated and do exit if not
#|#
#|# Send Back   : OK/exit
############ STACK_TRACE_BUILDER #####################
Function_Name="$0"
Function_PATH="${Function_PATH}/${Function_Name}"
######################################################
MSG_DISPLAY "Debug7" "Current Stack : [ ${Function_PATH} ] "

if [ "${Global_Tool_wget_Status}" = "DISABLED" ]
   then
   	   MSG_DISPLAY "ErrorN" " You don't have wget binary in your path "
fi

############### Stack_TRACE_BUILDER ################
Function_PATH="$( dirname ${Function_PATH} )"
####################################################
}

function Control_Check_perl_status
{
#|# Var to set  : None
#|#
#|# Base usage  : Control_Check_perl_status
#|#
#|# Description : This function check if you have perl activated and do exit if not
#|#
#|# Send Back   : OK/exit
############ STACK_TRACE_BUILDER #####################
Function_Name="$0"
Function_PATH="${Function_PATH}/${Function_Name}"
######################################################
MSG_DISPLAY "Debug7" "Current Stack : [ ${Function_PATH} ] "

if [ "${Global_Tool_perl_Status}" = "DISABLED" ]
   then
       MSG_DISPLAY "ErrorN" " You don't have perl binary in your path "
fi

############### Stack_TRACE_BUILDER ################
Function_PATH="$( dirname ${Function_PATH} )"
####################################################
}

function Control_Check_md5sum_status
{
#|# Var to set  : None
#|#
#|# Base usage  : Control_Check_md5sum_status
#|#
#|# Description : This function check if you have md5sum activated and do exit if not
#|#
#|# Send Back   : OK/exit
############ STACK_TRACE_BUILDER #####################
Function_Name="$0"
Function_PATH="${Function_PATH}/${Function_Name}"
######################################################
MSG_DISPLAY "Debug7" "Current Stack : [ ${Function_PATH} ] "

if [ "${Global_Tool_md5sum_Status}" = "DISABLED" ]
   then
       MSG_DISPLAY "ErrorN" " You don't have md5sum binary in your path "
fi

############### Stack_TRACE_BUILDER ################
Function_PATH="$( dirname ${Function_PATH} )"
####################################################
}

function Control_Check_cvs_status
{
#|# Var to set  : None
#|#
#|# Base usage  : Control_Check_cvs_status
#|#
#|# Description : This function check if you have cvs activated and do exit if not
#|#
#|# Send Back   : OK/exit
############ STACK_TRACE_BUILDER #####################
Function_Name="$0"
Function_PATH="${Function_PATH}/${Function_Name}"
######################################################
MSG_DISPLAY "Debug7" "Current Stack : [ ${Function_PATH} ] "

if [ "${Global_Tool_cvs_Status}" = "DISABLED" ]
   then
       MSG_DISPLAY "ErrorN" " You don't have cvs binary in your path "
fi

############### Stack_TRACE_BUILDER ################
Function_PATH="$( dirname ${Function_PATH} )"
####################################################
}


Sourced_OK="1"
