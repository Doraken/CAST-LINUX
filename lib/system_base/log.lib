###############################################################################
#Log.lib                                               Version : 1.1.2.2      #
#                                                                             #
# Creation Date : 09/10/2006                                                  #
# Team          : Only me after all                                           #
# Support mail  : arnaud@crampet.net                                          #
# Author        : Arnaud Crampet                                              #
#                                                                             #
# Subject : This library provides base logging and runtime error messaging    #
#                                                                             #
###############################################################################
####
# INFO



function MSG_DISPLAY
{
#|# Var to set        :
#|# MD_Type_Msg       : Use this var to set
#|# MD_Msg_To_Display : Use this var to set
#|# MD_Level_Code     : Use this var to set
#|# ${1}        : Use this var to set [ MD_Type_Msg ]
#|# ${2}        : Use this var to set [ MD_Msg_To_Display ]
#|# ${3}        : Use this var to set [ Level_Code ]
#|#
#|# Base usage  : MSG_DISPLAY "MD_Type_Msg" "MD_Msg_To_Display" "Level_Code"
#|#
#|# Description : This function is used for every messaging and error service
#|#
#|# Send Back   : Message or exit level
################################################################################
MD_Type_Msg="${1}"
MD_Msg_To_Display="${2}"
MD_Level_Code="${3}"
Base_sreen_Size_limit="$( tput cols )"


__Noendline=""
case ${MD_Type_Msg} in
        starting_Global) __Noendline="-n"
        ManageMessage
        ;;
        Starting)        __Noendline="-n"
        ManageMessage
        ;;
        StMessage)       __Noendline="-n"
        ManageMessage
        ;;
        End_Global)      __Noendline="-n"
        ManageMessage
        ;;
        ErrorN) ManageError
        ;;
        *) FONT_set_Error_Font
          echo  " FATAL ERROR ON MGS FUNCTION USE "
          echo  " FUNCTION     = [ ${Function_PATH} ] "
          echo  " SUB FUNCTION = [ ${SUB_Function_Name} ]"
          echo  " Debug type   = [ ${MD_Type_Msg}  ]"
          echo  " have a nice day .... :-p "
        FONT_set_Basic_Font
        eval printf "\\\033\\[K"
        exit 2
        ;;
esac


FONT_set_Basic_Font
Emptying_MSGS_vars
}

function ManageMessage()
{
        if [ "${MD_Level_Code}" -le "${Debug_state}" ]
                then 
                        _SMessage_VAR="Main : [ ${Function_Name} :" 
                        _EMessage_VAR="[ ${MD_Type_Msg} ]"
                        #spliter_line_MSG "${_SMessage_VAR}" "${_EMessage_VAR}"
                        echo ${__Noendline} "${_SMessage_VAR}${MSG_SPLITER}${_EMessage_VAR}"
        fi
}


function ManageError()
{
        if [  "${MD_Level_Code}" = "0" ]
                then
                        FONT_set_Warn_Font                                         	    
                        _SMessage_VAR="$( echo  "Warning ON ${Function_Name} :")"
                        _EMessage_VAR="$( echo  "[ ${MD_Msg_To_Display} ]")"
                        spliter_line_MSG "${_SMessage_VAR}" "${_EMessage_VAR}"
                        eval echo  "${_SMessage_VAR}${MSG_SPLITER}${_EMessage_VAR}"   
                        FONT_set_Basic_Font
                else
                        FONT_set_Error_Font
                        Function_Name="$( echo  ${Function_PATH} | awk -F'[/]' '{ print $NF }' )"
                        _SMessage_VAR="$( echo  "ERROR ON ${Function_Name} :")"
                        _EMessage_VAR="$( echo  "[ CODE=${MD_Level_Code} [ ${MD_Msg_To_Display} ]")"
                        spliter_line_MSG "${_SMessage_VAR}" "${_EMessage_VAR}"
                        eval echo  "${_SMessage_VAR}${MSG_SPLITER}${_EMessage_VAR}"   
                        FONT_set_Basic_Font
                        exit ${MD_Level_Code}
        fi
}



f

function Set_Message_Type_Display
{
#|# Var to set        :
#|# MD_Type_Msg       : Use this var to set
#|# MD_Msg_To_Display : Use this var to set
#|# MD_Level_Code     : Use this var to set
#|# ${1}        : Use this var to set" "_Message_Type ]
#|#
#|# Base usage  : Set_Message_Type_Display "Message type"  
#|#
#|# Description : This function is used set display color for using type of message
#|#
#|# Send Back   : Console Colour  
################################################################################
_Message_Type="${1}"
case ${_Message_Type} in 
       "info") FONT_set_info_Font
            ;;
        "config") FONT_set_info_Font
            ;;
    "message") FONT_set_message_Font
            ;;
      "check") FONT_set_check_Font
            ;;
      "debug") FONT_set_debug_Font
            ;;
    "warning") FONT_set_warning_Font
            ;;
      "error") FONT_set_error_Font
            ;;
            *) FONT_set_message_Font
               #echo message type is out of range [ ${_Message_Type} ]
               #exit 
             ;;
esac
}

function Set_Message_Result_Display
{
#|# Var to set        :
#|# MD_Type_Msg       : Use this var to set
#|# MD_Msg_To_Display : Use this var to set
#|# MD_Level_Code     : Use this var to set
#|# ${1}        : Use this var to set" "_Message_result ]
#|#
#|# Base usage  : Set_Message_Result_Display "Message result"  
#|#
#|# Description : This function is used set display color for using type of action result
#|#
#|# Send Back   : Console Colour  
################################################################################
_Message_result="${1}"
case ${_Message_result} in 
        "ok") FONT_set_Ok_Font
            ;;
        "ko") FONT_set_error_Font
            ;;
   "success") FONT_set_Ok_Font
            ;;
    "warning") FONT_set_warning_Font
            ;;
      "error") FONT_set_error_Font
            ;;
            *) FONT_set_info_Font
			;;
esac
}


function Set_spliter_line_MSG
{

_Line_Used_Char="$(expr ${_Start_Line_len} + ${_End_Line_len})"
Line_Spliter="$( expr  ${GLB_sreen_Size_limit} - ${_Line_Used_Char} )"
MSG_SPLITER=$(awk 'END{c=0; do{printf "\\ "; c++}while(c<ntimec)}' ntimec=$Line_Spliter  /dev/null)
echo -n ${MSG_SPLITER}
_Start_Line_len="0"
_End_Line_len="0"

}



function Sub_MSGDebug
{
	 _DebugLevel="$( print ${1} | awk -FDebug '{ print $2 }')"
	 _SMessage_VAR="$( echo  "Debug\(${_DebugLevel}\) Information :")"
	 _EMessage_VAR="$( echo  "[ ${MD_Msg_To_Display} ]")"
	 spliter_line_MSG "${_SMessage_VAR}" "${_EMessage_VAR}"
	 eval _Sub_DBG=\$\{Debug_Redirector${_DebugLevel}\}
	 echo  "${_SMessage_VAR}${MSG_SPLITER}${_EMessage_VAR} ${_Sub_DBG}"
	 FONT_set_Basic_Font
}

function Debug_INIT
{
. ${Base_Dir_Scripts_Lib}/system_base/display/font.lib

Interleave_DEST="${Info_Redirector}"

MSG_DISPLAY "Config" "Info_Redirector     is set to : [ ${Info_Redirector}  ]"
MSG_DISPLAY "Config" "Question_Redirector is set to : [ ${Question_Redirector} ]"
MSG_DISPLAY "Config" "Debug_Redirector    is set to : [ ${Debug_Redirector}  ]"
MSG_DISPLAY "Config" "Debug_Redirector2   is set to : [ ${Debug_Redirector2} ]"
MSG_DISPLAY "Config" "Debug_Redirector3   is set to : [ ${Debug_Redirector3} ]"
MSG_DISPLAY "Config" "Debug_Redirector4   is set to : [ ${Debug_Redirector4} ]"
MSG_DISPLAY "Config" "Debug_Redirector5   is set to : [ ${Debug_Redirector5} ]"
MSG_DISPLAY "Config" "Debug_Redirector6   is set to : [ ${Debug_Redirector6} ]"
Interleave_MSG

}

function spliter_line_MSG
{
MSG_SPLITER="0"
_Start_Line_Var="$(print ${1} | sed 's/ /_/g')" 
_End_Line_Var="$( print ${2} |  sed 's/ /_/g' )"
#echo "" 
#echo  "${_End_Line_Var}"
#echo "" 
_Start_Line_len="$( Get_Var_Lenght_MSG ${_Start_Line_Var} )" 
_End_Line_len="$( Get_Var_Lenght_MSG ${_End_Line_Var} )" 
_Line_Used_Char="$(expr ${_Start_Line_len} + ${_End_Line_len})"
Line_Spliter="$( expr  ${Base_sreen_Size_limit} - ${_Line_Used_Char} )"
MSG_SPLITER=$(awk 'END{c=0; do{printf "\\ "; c++}while(c<ntimec)}' ntimec=$Line_Spliter  /dev/null)
#echo  "Start = ${_Start_Line_len} End = ${_End_Line_len} spliter = ${Line_Spliter}  Used = ${_Line_Used_Char} Term size = ${Base_sreen_Size_limit} Start = ${_Start_Line_len} end = ${_End_Line_len}"
_Start_Line_Var=""
_End_Line_Var=""
_Start_Line_len="0"
_End_Line_len="0"

}

function Get_Var_Lenght_MSG
{
_VAR_Src="${1}" 
_VAR_len="$( expr length "${_VAR_Src}" )"                                                                      
print ${_VAR_len}
_VAR_len="0"
_VAR_Src="0"
}



function Interleave_MSG
{
 echo  ""                                                                                  
 echo  "###############################################################################"
 echo  ""                                                                               
}

function Spacer_MSG
{
 echo  ""       
 echo  ""       
}

function Emptying_MSGS_vars
{
MD_Type_Msg=""
MD_Msg_To_Display=""
Err_Question_Msg=""
Err_Msg=""
FONT_set_Basic_Font
}

function Log_Logger_use
{
#|# Var to set  : None
#|# Global_Tool_Logger_Status : Use this var to set status of logger usage
#|# Global_Tool_Logger_bin    : Use this var to set where is logger bin
#|# LLU_level                 : Use this var to set leval of log
#|#
#|# Base usage  : Log_Logger_use
#|#
#|# Description : This function is used to creat entry in common system log files
#|#               if logger is not present, default log file is use instead of sys log file
#|#
#|# Send Back   : Logs
############ STACK_TRACE_BUILDER #####################
Function_Name="$0"
Function_PATH="${Function_PATH}/${Function_Name}"
######################################################
MSG_DISPLAY "Debug6" "Current Stack : [ ${Function_PATH} ] "
LLU_level="${1}"

if [ "${LLU_level}" <= "${Debug_state}" ]
   then
       if [ "${Global_Tool_Logger_Status}" = "ENABLED" ]
          then
              ${Global_Tool_Logger_bin} -t "CAST ${Action_Type}" "Log ${LLU_level} : [ ${MD_Msg_To_Display} ]"
          else
              echo  "Logger Information : [ ${MD_Msg_To_Display} ]" >> ${Base_Log_File}
        fi
fi
############### Stack_TRACE_BUILDER ################
Function_PATH="$( dirname ${Function_PATH} )"
####################################################
}

function Execution_Output_redirector
{
#|# BASE_VAR_OutPut_Redirector : this to set in wich file we redirect std ouptut flow
#|# $1                : Use this var to set wOutPut_Redirector
#Base use           :
#|#                    Execution_Output_redirector "My_redirect_File"

############ STACK_TRACE_BUILDER #####################
Function_Name="${0}"
Function_PATH="${Function_PATH}/${Function_Name}"
######################################################
MSG_DISPLAY "Debug4" "Current Stack : [ ${Function_PATH} ] "
BASE_VAR_OutPut_Redirector="${1}"
if [ -z "${BASE_VAR_OutPut_Redirector}" ]
   then
           MSG_DISPLAY "Debug6" "Sub redirector for STD oupud device : [ NOT SET ]"
           FINAL_OUTPUT_REDIRECTOR="${My_PTS}"
   else
           MSG_DISPLAY "Debug6" "Sub redirector for STD oupud device : [ ${BASE_VAR_OutPut_Redirector} ]"
           if [ -e "${BASE_VAR_OutPut_Redirector}" ]
               then
                       MSG_DISPLAY "Debug6" "Redirector file  : [ EXIST and OK ]"
                       FINAL_OUTPUT_REDIRECTOR="${BASE_VAR_OutPut_Redirector}"
              else
                   touch ${BASE_VAR_OutPut_Redirector}
                   if [ -e "${BASE_VAR_OutPut_Redirector}" ]
                      then
                           MSG_DISPLAY "Debug6" "Creation of Redirector file  : [ OK ]"
                           FINAL_OUTPUT_REDIRECTOR="${BASE_VAR_OutPut_Redirector}"
                      else
                           MSG_DISPLAY "Warning1" "Creation of Redirector file  : [ KO ]"
                           MSG_DISPLAY "Warning1" "Corrective ACTION : [ Assuming no specifics redirector ]"
                           FINAL_OUTPUT_REDIRECTOR="${My_PTS}"
                    fi
             fi
fi
MSG_DISPLAY "Debug6" "Sub redirecto for STD ouput device set to : [ NOT SET ]"
############### Stack_TRACE_BUILDER ################
Function_PATH="$( dirname ${Function_PATH} )"
####################################################
}

function Log_Debug_change
{
Menu_Change_Conf_item "Debug_state" "${Debug_state}"
Debug_INIT
}


Sourced_OK="1"
