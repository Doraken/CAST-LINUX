###############################################################################
# EXPECT.lib                                              Version : 1.1.2.7   #
#                                                                             #
# Creation Date : 02/17/2007                                                  #
# Team          : Only me after all                                           #
# Support mail  : arnaud@crampet.net                                          #
# Author        : C Arnaud Crampet                                            #
#                                                                             #
# Subject : This library provide automatic generaion for expect scripts       #
#                                                                             #
###############################################################################
####
# INFO
#############################################################################

function Base_Expect
{
#|# Var to set  : None
#|#
#|# Base usage  : Base_Expect <<-EOF cmds EOF
#|#
#|# Description : This function is used to launche command in filter expect using
#|#               connexion prameter ( sete in conf File )
#|#
#|# Send Back   : text output
############ STACK_TRACE_BUILDER #####################
Function_Name="${0}"
Function_PATH="${Function_PATH}/${Function_Name}"
######################################################
MSG_DISPLAY "Debug4" "Current Stack : [ ${Function_PATH} ] "

Expect_CTRL_VAR_BASE
  #Use this extern variables to determin how to do a connexion
  export servername
  export user
  export password

  ${Used_Filter_expect} |\
    sed -e "s///" -ne "s/^\\[$servername]//p"

############### Stack_TRACE_BUILDER ################
Function_PATH="$(dirname ${Function_PATH})"
####################################################
}

function Base_Expect_call
{
#|# Var to set  :
#|#  BEC_File_cmd           : use this var to set the file name of the command
#|#                           file to use in expect filter
#|#  BEC_Output_Filename    : Use this var to set in wich file to redirect all
#|#                           output
#|#	 ${1}                   : use this var to set [ BEC_File_cmd ]
#|#	 ${2}                   : use this var to set [ BEC_Output_Filename ]
#|#
#|# Base usage              : Base_Expect_call "My command file" "My output File"
#|#
#|# Description             : This function is used to launch all expect script
#|#                           in the filter_expext script
#|#
#|# Send Back               : execution output or file
############ STACK_TRACE_BUILDER #####################
Function_Name="${0}"
Function_PATH="${Function_PATH}/${Function_Name}"
######################################################
MSG_DISPLAY "Debug4" "Current Stack : [ ${Function_PATH} ] "
BEC_File_cmd="${1}"
BEC_Output_Filename="${2}"
SYSTEM_VAR_RANDOMIZER
BEC_Output_Filename_TMP="${Base_Dir_Scripts_Tmp}/Temp_${EXTERNAL_randomized_var}_expt.file"

if [ -z "${BEC_Output_Filename}" ]
   then
   	    BEC_Output_Filename_TMP="${Base_Dir_Scripts_Tmp}/Temp_${EXTERNAL_randomized_var}_expt.file"
        eval ${Used_Filter_expect}  < ${BEC_File_cmd} > ${BEC_Output_Filename_TMP}
        cat ${BEC_Output_Filename_TMP} | grep "^\[${servername}\]" | sed -e "s/^\\[${servername}]//"
        File_Remove "${BEC_Output_Filename_TMP}" "" "" "2"
   else
        eval ${Used_Filter_expect}  < ${BEC_File_cmd} > ${BEC_Output_Filename_TMP}
        cat ${BEC_Output_Filename_TMP} | grep "^\[${servername}\]" | sed -e "s/^\\[${servername}]//"  > ${BEC_Output_Filename}
        File_Remove "${BEC_Output_Filename_TMP}" "" "" "2"
fi



############### Stack_TRACE_BUILDER ################
Function_PATH="$(dirname ${Function_PATH})"
####################################################
}

############################### Distante get information #######################
function Expect_Get_System_Name
{
#|# Var to set  :
#|#  EGSN_Used_Server_Name  : use this var to set Server name to get os type
#|#  EGSN_used_user         : Use this var to set connexion user
#|#  EGSN_used_password     : Use this var to set connexion user password
#|#	 ${1}                   : use this var to set [ EGSN_Used_Server_Name ]
#|#	 ${2}                   : use this var to set [ EGSN_used_user ]
#|#	 ${3}                   : use this var to set [ EGSN_used_password ]
#|#
#|# Base usage              : Expect_Get_System_Name "EGSN_Used_Server_Name" "EGSN_used_user" "EGSN_used_password"
#|#
#|# Description             : This function is used to launch all expect script
#|#                           to get distent system os
#|#
#|# Send Back               : Vars
############ STACK_TRACE_BUILDER #####################
Function_Name="${0}"
Function_PATH="${Function_PATH}/${Function_Name}"
######################################################
MSG_DISPLAY "Debug4" "Current Stack : [ ${Function_PATH} ] "
EGSN_Used_Server_Name="${1}"
EGSN_used_user="${2}"
EGSN_used_password="${3}"
EGSN_File_cmd="${Base_Dir_Scripts_Lib_Expects_cmd}/get_uname.file"
EGSN_File_linux="${Base_Dir_Scripts_Lib_Expects_cmd}/get_linux_vers.file"
EGSN_File_aix="${Base_Dir_Scripts_Lib_Expects_cmd}/get_aix_vers.file"
EGSN_File_solaris="${Base_Dir_Scripts_Lib_Expects_cmd}/get_solaris_vers.file"
EGSN_Output_Filename="host_uname_${EGSN_Used_Server_Name}.txt"

Expect_Base_SetEnv "${EGSN_Used_Server_Name}" "${EGSN_used_user}" "${EGSN_used_password}"
Base_Expect_call "${EGSN_File_cmd}"
Expect_Base_SetEnv_SCP "${EGSN_Used_Server_Name}" "${EGSN_used_user}" "${EGSN_used_password}" "/tmp/${EGSN_Output_Filename}" "${Base_Dir_Scripts_Tmp}/${EGSN_Output_Filename}" "Get"
Global_Distant_Server_OS="$( cat ${Base_Dir_Scripts_Tmp}/${EGSN_Output_Filename} )"


case ${Global_Distant_Server_OS} in
            Linux|linux|LINUX) MSG_DISPLAY "Info" "Server [ ${EGSN_Used_Server_Name} ] running under  [ ${Global_Distant_Server_OS} ] "
                               ;;
                  AIX|aix|Aix) Base_Expect_call "${EGSN_File_aix}"
                               Expect_Base_SetEnv_SCP "${EGSN_Used_Server_Name}" "${EGSN_used_user}" "${EGSN_used_password}" "/tmp/host_uname_aix_$(EGSN_Used_Server_Name).txt" "${Base_Dir_Scripts_Tmp}/host_uname_aix_$(EGSN_Used_Server_Name).txt" "Get"
                               Global_Distant_Server_OS_Version="$(  cat ${Base_Dir_Scripts_Tmp}/host_uname_aix_${EGSN_Used_Server_Name}.txt  | awk '{ print $1 }' )"
                               Global_Distant_Server_OS_Revision="$( cat ${Base_Dir_Scripts_Tmp}/host_uname_aix_${EGSN_Used_Server_Name}.txt  | awk '{ print $2 }' )"
                               MSG_DISPLAY "Info" "Server [ ${EGSN_Used_Server_Name} ] running under  [ ${Global_Distant_Server_OS} ] "
                               ;;
            SunOS|SUNOS|sunos) MSG_DISPLAY "Info" "Server [ ${EGSN_Used_Server_Name} ] running under  [ ${Global_Distant_Server_OS} ] "
                               ;;
                            *) MSG_DISPLAY "ErrorN" "Not yet suppoted system [ ${SYSTEM_NAME} ] " "1"

                               ;;
esac




############### Stack_TRACE_BUILDER ################
Function_PATH="$(dirname ${Function_PATH})"
####################################################
}


Sourced_OK="1"
