###############################################################################
# Pkg_install.lib                                          Version : [GXRXCX] #
#                                                                             #
# Team          : Alwayse the same guy ....                                   #
# Support mail  : arnaud@crampet.net                                          #
# Author        : Arnaud Crampet                                              #
#                                                                             #
# Subject : This library provide base Generics install procedur for some pkgs #
#                                                                             #
###############################################################################
####
# INFO

function PKG_INSTALL_config                      # PKG_installable_ok
{
#|# Var to set  : None                     
#|#  b
#|# Base usage  : PKG_INSTALL_config
#|#
#|# Description : This function is used to create change menu for http get location parameter
#|#
#|# Send Back   : Configuration menu
#|# 
############ STACK_TRACE_BUILDER #####################
Function_Name="$0"
Function_PATH="${Function_PATH}/${Function_Name}"
######################################################
MSG_DISPLAY "Debug4" "Current Stack : [ ${Function_PATH} ] "
PKG_INSTALL_CTRL_Sourcing_PKG_CONF
set -A Configuration_install_pkg 'Menu Configuration:'                       \
     'CHANGE Base_Dir_prefix_install=[${Base_Dir_prefix_install}]'           \
     'CHANGE EXTERNAL_ONLY_GET=[${EXTERNAL_ONLY_GET}]'                       \
     'packages_version_config'                                               \
     'Packages_URL_config'

Menu_Build Configuration_install_pkg
############### Stack_TRACE_BUILDER ################
Function_PATH="$( dirname ${Function_PATH} )"
####################################################
}

function packages_version_config
{
#|# Var to set  : None                     
#|#
#|# Base usage  : packages_version_config
#|#
#|# Description : This function is used to create change menu package version parameter
#|#
#|# Send Back   : Configuration menu
#|# 
############ STACK_TRACE_BUILDER #####################
Function_Name="$0"
Function_PATH="${Function_PATH}/${Function_Name}"
######################################################
MSG_DISPLAY "Debug4" "Current Stack : [ ${Function_PATH} ] "
PKG_LST=""
MSG_DISPLAY "Debug5"  "Used Configuration file : [ ${Base_Dir_Scripts_CNF}/${Package_Configuration_File}]"
for PKS_versions in $( cat ${Base_Dir_Scripts_CNF}/${Package_Configuration_File} |  grep "^PKG_" | awk -F\= '{ print $1 }')
    do
       PKG_LST="'CHANGE ${PKS_versions}=[\${${PKS_versions}}]'  ${PKG_LST}"
done
PKG_LST="'PKG version configuration menu :' ${PKG_LST}"
eval set -A PKG_Version_Menu ${PKG_LST}
#print ${PKG_Version_Menu[@*]}
Menu_Build PKG_Version_Menu
############### Stack_TRACE_BUILDER ################
Function_PATH="$( dirname ${Function_PATH} )"
####################################################
}


function Packages_URL_config
{
#|# Var to set  : None                     
#|#
#|# Base usage  : Packages_URL_config
#|#
#|# Description : This function is used to create change menu package URL parameter
#|#
#|# Send Back   : Configuration menu
#|# 
############ STACK_TRACE_BUILDER #####################
Function_Name="$0"
Function_PATH="${Function_PATH}/${Function_Name}"
######################################################
MSG_DISPLAY "Debug4" "Current Stack : [ ${Function_PATH} ] "
PKS_URLS_INFS_LIST=""
MSG_DISPLAY "Debug5"  "Used Configuration file : [ ${Base_Dir_Scripts_CNF}/${Package_Configuration_File}]"
cat ${Base_Dir_Scripts_CNF}/${Package_Configuration_File} |  grep "^URL_" | awk -F\= '{ print $1 }'
for PKS_URLS_INFS in $( cat ${Base_Dir_Scripts_CNF}/${Package_Configuration_File} |  grep "^URL_" | awk -F\= '{ print $1 }')
    do
       PKS_URLS_INFS_LIST="'CHANGE ${PKS_URLS_INFS}=[\${${PKS_URLS_INFS}}]'  ${PKS_URLS_INFS_LIST}"
done
PKS_URLS_INFS_LIST="'PKG URL configuration menu :' ${PKS_URLS_INFS_LIST}"
eval set -A PKG_URL_Menu_var ${PKS_URLS_INFS_LIST}
Menu_Build PKG_URL_Menu_var

############### Stack_TRACE_BUILDER ################
Function_PATH="$( dirname ${Function_PATH} )"
####################################################
}

function PKG_INSTALL_CTRL_Sourcing_PKG_CONF
{
#|# Var to set  : None                     
#|#
#|# Base usage  : packages_version_config
#|#
#|# Description :  This function is used to Source package config File
#|#
#|# Send Back   : Sourced parameter file
#|#
############ STACK_TRACE_BUILDER #####################
Function_Name="$0"
Function_PATH="${Function_PATH}/${Function_Name}"
######################################################
MSG_DISPLAY "Debug4" "Current Stack : [ ${Function_PATH} ] "

if [ "${Package_Configuration}" = "OK" ]
   then
       MSG_DISPLAY "Debug5" "Sourcing Of  Package_Configuration_File  : [ OK ] "
   else
       MSG_DISPLAY "Debug5" "Sourcing Of  Package_Configuration_File  : [ NOK ] "
       MSG_DISPLAY "Debug6" "File is   : [ ${Package_Configuration_File} ] "
       MSG_DISPLAY "Debug6" "PATH is   : [ ${Base_Dir_Scripts_CNF} ] "
       File_Ctrl_Sourcing  ${Package_Configuration_File} ${Base_Dir_Scripts_CNF_spec} ${ATD_for_Package_Configuration_CNF}
fi
############### Stack_TRACE_BUILDER ################
Function_PATH="$( dirname ${Function_PATH} )"
####################################################
}


function PKG_INSTALL_POSTFIX        # PKG_installable_ok
{
#|# This function is used whithout parameter 
#|# This function is used to install POSTFIX 
############ STACK_TRACE_BUILDER #####################
Function_Name="$0"
Function_PATH="${Function_PATH}/${Function_Name}"
######################################################
MSG_DISPLAY "Debug4" "Current Stack : [ ${Function_PATH} ] "
PKG_INSTALL_CTRL_Sourcing_PKG_CONF

MSG_DISPLAY "Info" "Needed PKG : [ ${PKG_CVS} ] "
PKG_INSTALL_CVS


MSG_DISPLAY "Info" "Installing Package : [ ${PKG_POSTFIX} ] "

INTERNAL_ONLY_GET="${1}"

Redo_Last="Dummy"
################ POSTFIX ###########################
Internet_Http_Get "${URL_POSTFIX}" "${PKG_POSTFIX}.${Pkg_ext_tgz}" "${PWD_DLW_PKG}" ""
if [ "${EXTERNAL_ONLY_GET}" = "True" ]
   then
       MSG_DISPLAY "Info" "Get only Package : [ ${URL_POSTFIX} ] "
   else
       archive_file_extract_tgz "${PWD_DLW_PKG}" "${PKG_POSTFIX}" "${Pkg_ext_tgz}"
       Base_Compile_OutPut_Redirector="${Prefix_Log_File}_${0}_$(date +%d_%m_%y).log"
       Base_Param_type_PKG="STD"
       Base_Param_PKG_To_Compile="${PKG_POSTFIX}"
       Base_Param_Compile_Options="--prefix=${BASE_PATH_POSTFIX} --with-cvs=${BASE_PATH_CVS}/bin/cvs --with-perl=/usr/bin/perl"
       Base_Param_PKG_To_Compile_Option_Path=""
       Custom_Pkg_Configurator=""
       Base_Param_Make_Options="Dummy"
       Base_Param_Make_Install_Options="Dummy"
       Base_Param_Make_clean="TRUE"
       Base_Param_Post_Compile_Action="COMPILE_Magic_linker"
       Base_Param_PKG_to_link=${Base_Param_PKG_To_Compile}
       Base_INTRA_DIRS="${BASE_PATH_POSTFIX}"
       COMPILE_Generics_Base_func
fi
############### Stack_TRACE_BUILDER ################
Function_PATH="$( dirname ${Function_PATH} )"
####################################################
}


function PKG_INSTALL_CVSD        # PKG_installable_ok
{
#|# This function is used whithout parameter 
#|# This function is used to install CVSD
############ STACK_TRACE_BUILDER #####################
Function_Name="$0"
Function_PATH="${Function_PATH}/${Function_Name}"
######################################################
MSG_DISPLAY "Debug4" "Current Stack : [ ${Function_PATH} ] "
PKG_INSTALL_CTRL_Sourcing_PKG_CONF

MSG_DISPLAY "Info" "Needed PKG : [ ${PKG_CVS} ] "
PKG_INSTALL_CVS


MSG_DISPLAY "Info" "Installing Package : [ ${PKG_CVSD} ] "

INTERNAL_ONLY_GET="${1}"

Redo_Last="Dummy"
################ CVSD ###########################
Internet_Http_Get "${URL_CVSD}" "${PKG_CVSD}.${Pkg_ext_tgz}" "${PWD_DLW_PKG}" ""
if [ "${EXTERNAL_ONLY_GET}" = "True" ]
   then
       MSG_DISPLAY "Info" "Get only Package : [ ${URL_CVSD} ] "
   else
       archive_file_extract_tgz "${PWD_DLW_PKG}" "${PKG_CVSD}" "${Pkg_ext_tgz}"
       Base_Compile_OutPut_Redirector="${Prefix_Log_File}_${0}_$(date +%d_%m_%y).log"
       Base_Param_type_PKG="STD"
       Base_Param_PKG_To_Compile="${PKG_CVSD}"
       Base_Param_Compile_Options="--prefix=${BASE_PATH_CVSD} --with-cvs=${BASE_PATH_CVS}/bin/cvs --with-perl=/usr/bin/perl"
       Base_Param_PKG_To_Compile_Option_Path=""
       Custom_Pkg_Configurator=""
       Base_Param_Make_Options="Dummy"
       Base_Param_Make_Install_Options="Dummy"
       Base_Param_Make_clean="TRUE"
       Base_Param_Post_Compile_Action="COMPILE_Magic_linker"
       Base_Param_PKG_to_link=${Base_Param_PKG_To_Compile}
       Base_INTRA_DIRS="${BASE_PATH_CVSD}"
       COMPILE_Generics_Base_func
fi
############### Stack_TRACE_BUILDER ################
Function_PATH="$( dirname ${Function_PATH} )"
####################################################
}


function PKG_INSTALL_RSYNC        # PKG_installable_ok
{
#|# This function is used whithout parameter 
#|# This function is used to install RSYNC 
############ STACK_TRACE_BUILDER #####################
Function_Name="$0"
Function_PATH="${Function_PATH}/${Function_Name}"
######################################################
MSG_DISPLAY "Debug4" "Current Stack : [ ${Function_PATH} ] "
PKG_INSTALL_CTRL_Sourcing_PKG_CONF

MSG_DISPLAY "Info" "Needed PKG : [ ${PKG_LIBICONV} ] "
PKG_INSTALL_LIBICONV
MSG_DISPLAY "Info" "Needed PKG : [ ${PKG_OPENSSL} ] "
PKG_INSTALL_OpenSsl


MSG_DISPLAY "Info" "Installing Package : [ ${PKG_RSYNC} ] "

INTERNAL_ONLY_GET="${1}"

Redo_Last="Dummy"
################ RSYNC ###########################
Internet_Http_Get "${URL_RSYNC}" "${PKG_RSYNC}.${Pkg_ext_tgz}" "${PWD_DLW_PKG}" ""
if [ "${EXTERNAL_ONLY_GET}" = "True" ]
   then
       MSG_DISPLAY "Info" "Get only Package : [ ${URL_RSYNC} ] "
   else
       archive_file_extract_tgz "${PWD_DLW_PKG}" "${PKG_RSYNC}" "${Pkg_ext_tgz}"
       Base_Compile_OutPut_Redirector="${Prefix_Log_File}_${0}_$(date +%d_%m_%y).log"
       Base_Param_type_PKG="STD"
       Base_Param_PKG_To_Compile="${PKG_RSYNC}"
       Base_Param_Compile_Options="--prefix=${BASE_PATH_RSYNC}  --with-libiconv=${BASE_PATH_LIBICONV} --disable-ipv6 "
       Base_Param_PKG_To_Compile_Option_Path=""
       Custom_Pkg_Configurator=""
       Base_Param_Make_Options="Dummy"
       Base_Param_Make_Install_Options="Dummy"
       Base_Param_Make_clean="TRUE"
       Base_Param_Post_Compile_Action="COMPILE_Magic_linker"
       Base_Param_PKG_to_link=${Base_Param_PKG_To_Compile}
       Base_INTRA_DIRS="${BASE_PATH_RSYNC}"
       COMPILE_Generics_Base_func
fi
############### Stack_TRACE_BUILDER ################
Function_PATH="$( dirname ${Function_PATH} )"
####################################################
}

function PKG_INSTALL_TOMCAT        # PKG_installable_ok
{
#|# This function is used whithout parameter 
#|# This function is used to install TOMCAT 
############ STACK_TRACE_BUILDER #####################
Function_Name="$0"
Function_PATH="${Function_PATH}/${Function_Name}"
######################################################
MSG_DISPLAY "Debug4" "Current Stack : [ ${Function_PATH} ] "
PKG_INSTALL_CTRL_Sourcing_PKG_CONF

MSG_DISPLAY "Info" "Installing Package : [ ${PKG_TOMCAT} ] "

INTERNAL_ONLY_GET="${1}"

Redo_Last="Dummy"
################ TOMCAT ###########################
Internet_Http_Get "${URL_TOMCAT}" "${PKG_TOMCAT}.${Pkg_ext_tgz}" "${PWD_DLW_PKG}" ""
if [ "${EXTERNAL_ONLY_GET}" = "True" ]
   then
       MSG_DISPLAY "Info" "Get only Package : [ ${URL_TOMCAT} ] "
   else
       archive_file_extract_tgz "${PWD_DLW_PKG}" "${PKG_TOMCAT}" "${Pkg_ext_tgz}"
       Base_Compile_OutPut_Redirector="${Prefix_Log_File}_${0}_$(date +%d_%m_%y).log"
       Base_Param_type_PKG="STD"
       Base_Param_PKG_To_Compile="${PKG_TOMCAT}"
       Base_Param_Compile_Options="--prefix=${BASE_PATH_v} --disable-ipv6 "
       Base_Param_PKG_To_Compile_Option_Path=""
       Custom_Pkg_Configurator=""
       Base_Param_Make_Options="Dummy"
       Base_Param_Make_Install_Options="Dummy"
       Base_Param_Make_clean="TRUE"
       Base_Param_Post_Compile_Action="COMPILE_Magic_linker"
       Base_Param_PKG_to_link=${Base_Param_PKG_To_Compile}
       Base_INTRA_DIRS="${BASE_PATH_TOMCAT}"
       COMPILE_Generics_Base_func
fi
############### Stack_TRACE_BUILDER ################
Function_PATH="$( dirname ${Function_PATH} )"
####################################################
}


function PKG_INSTALL_AMAVISD        # PKG_installable_Nok
{
#|# This function is used whithout parameter 
#|# This function is used to install AMAVISD 
############ STACK_TRACE_BUILDER #####################
Function_Name="$0"
Function_PATH="${Function_PATH}/${Function_Name}"
######################################################
MSG_DISPLAY "Debug4" "Current Stack : [ ${Function_PATH} ] "
PKG_INSTALL_CTRL_Sourcing_PKG_CONF

MSG_DISPLAY "Info" "Needed PKG : [ ${PKG_ZLIB} ] "
PKG_INSTALL_zlib
MSG_DISPLAY "Info" "Needed PKG : [ ${PKG_BerkeleyDb} ] "
PKG_INSTALL_Berkeley_Db


MSG_DISPLAY "Info" "Needed PKG : [ ${PKG_LIBICONV} ] "
PKG_INSTALL_LIBICONV
MSG_DISPLAY "Info" "Needed PKG : [ ${PKG_OPENSSL} ] "
PKG_INSTALL_OpenSsl

MSG_DISPLAY "Info" "Installing Package : [ ${PKG_AMAVISD} ] "

INTERNAL_ONLY_GET="${1}"

Redo_Last="Dummy"
################ AMAVISD ###########################
Internet_Http_Get "${URL_AMAVISD}" "${PKG_AMAVISD}.${Pkg_ext_tgz}" "${PWD_DLW_PKG}" ""
if [ "${EXTERNAL_ONLY_GET}" = "True" ]
   then
       MSG_DISPLAY "Info" "Get only Package : [ ${URL_AMAVISD} ] "
   else
       archive_file_extract_tgz "${PWD_DLW_PKG}" "${PKG_AMAVISD}" "${Pkg_ext_tgz}"
       Base_Compile_OutPut_Redirector="${Prefix_Log_File}_${0}_$(date +%d_%m_%y).log"
       Base_Param_type_PKG="STD"
       Base_Param_PKG_To_Compile="${PKG_AMAVISD}"
       Base_Param_Compile_Options="--prefix=${BASE_PATH_AMAVISD}  --enable-threads --with-openssl=${BASE_PATH_OPENSSL} --with-libiconv=${BASE_PATH_LIBICONV} "
       Base_Param_PKG_To_Compile_Option_Path=""
       Custom_Pkg_Configurator=""
       Base_Param_Make_Options="Dummy"
       Base_Param_Make_Install_Options="Dummy"
       Base_Param_Make_clean="TRUE"
       Base_Param_Post_Compile_Action="COMPILE_Magic_linker"
       Base_Param_PKG_to_link=${Base_Param_PKG_To_Compile}
       Base_INTRA_DIRS="${BASE_PATH_AMAVISD}"
       COMPILE_Generics_Base_func
fi
############### Stack_TRACE_BUILDER ################
Function_PATH="$( dirname ${Function_PATH} )"
####################################################
}




function PKG_INSTALL_BIND        # PKG_installable_ok
{
#|# This function is used whithout parameter 
#|# This function is used to install BIND  
############ STACK_TRACE_BUILDER #####################
Function_Name="$0"
Function_PATH="${Function_PATH}/${Function_Name}"
######################################################
MSG_DISPLAY "Debug4" "Current Stack : [ ${Function_PATH} ] "
PKG_INSTALL_CTRL_Sourcing_PKG_CONF

MSG_DISPLAY "Info" "Needed PKG : [ ${PKG_LIBICONV} ] "
PKG_INSTALL_LIBICONV
MSG_DISPLAY "Info" "Needed PKG : [ ${PKG_OPENSSL} ] "
PKG_INSTALL_OpenSsl

MSG_DISPLAY "Info" "Installing Package : [ ${PKG_BIND} ] "

INTERNAL_ONLY_GET="${1}"

Redo_Last="Dummy"
################ BIND ###########################
Internet_Http_Get "${URL_BIND}" "${PKG_BIND}.${Pkg_ext_tgz}" "${PWD_DLW_PKG}" ""
if [ "${EXTERNAL_ONLY_GET}" = "True" ]
   then
       MSG_DISPLAY "Info" "Get only Package : [ ${URL_BIND} ] "
   else
       archive_file_extract_tgz "${PWD_DLW_PKG}" "${PKG_BIND}" "${Pkg_ext_tgz}"
       Base_Compile_OutPut_Redirector="${Prefix_Log_File}_${0}_$(date +%d_%m_%y).log"
       Base_Param_type_PKG="STD"
       Base_Param_PKG_To_Compile="${PKG_BIND}"
       Base_Param_Compile_Options="--prefix=${BASE_PATH_BIND}  --enable-threads --with-openssl=${BASE_PATH_OPENSSL} --with-libiconv=${BASE_PATH_LIBICONV} "
       Base_Param_PKG_To_Compile_Option_Path=""
       Custom_Pkg_Configurator=""
       Base_Param_Make_Options="Dummy"
       Base_Param_Make_Install_Options="Dummy"
       Base_Param_Make_clean="TRUE"
       Base_Param_Post_Compile_Action="COMPILE_Magic_linker"
       Base_Param_PKG_to_link=${Base_Param_PKG_To_Compile}
       Base_INTRA_DIRS="${BASE_PATH_BIND}"
       COMPILE_Generics_Base_func
fi
############### Stack_TRACE_BUILDER ################
Function_PATH="$( dirname ${Function_PATH} )"
####################################################
}




function PKG_INSTALL_LIBICONV        # PKG_installable_ok
{
#|# This function is used whithout parameter 
#|# This function is used to install LIBICONV  
############ STACK_TRACE_BUILDER #####################
Function_Name="$0"
Function_PATH="${Function_PATH}/${Function_Name}"
######################################################
MSG_DISPLAY "Debug4" "Current Stack : [ ${Function_PATH} ] "
PKG_INSTALL_CTRL_Sourcing_PKG_CONF

MSG_DISPLAY "Info" "Installing Package : [ ${PKG_LIBICONV} ] "

INTERNAL_ONLY_GET="${1}"

Redo_Last="Dummy"
################ LIBICONV ###########################
Internet_Http_Get "${URL_LIBICONV}" "${PKG_LIBICONV}.${Pkg_ext_tgz}" "${PWD_DLW_PKG}" ""
if [ "${EXTERNAL_ONLY_GET}" = "True" ]
   then
       MSG_DISPLAY "Info" "Get only Package : [ ${URL_LIBICONV} ] "
   else
       archive_file_extract_tgz "${PWD_DLW_PKG}" "${PKG_LIBICONV}" "${Pkg_ext_tgz}"
       Base_Compile_OutPut_Redirector="${Prefix_Log_File}_${0}_$(date +%d_%m_%y).log"
       Base_Param_type_PKG="STD"
       Base_Param_PKG_To_Compile="${PKG_LIBICONV}"
       Base_Param_Compile_Options="--prefix=${BASE_PATH_LIBICONV}"
       Base_Param_PKG_To_Compile_Option_Path=""
       Custom_Pkg_Configurator=""
       Base_Param_Make_Options="Dummy"
       Base_Param_Make_Install_Options="Dummy"
       Base_Param_Make_clean="TRUE"
       Base_Param_Post_Compile_Action="COMPILE_Magic_linker"
       Base_Param_PKG_to_link=${Base_Param_PKG_To_Compile}
       Base_INTRA_DIRS="${BASE_PATH_LIBICONV}"
       COMPILE_Generics_Base_func
fi
############### Stack_TRACE_BUILDER ################
Function_PATH="$( dirname ${Function_PATH} )"
####################################################
}

function PKG_INSTALL_NETSNMP        # PKG_installable_ok
{
#|# This function is used whithout parameter 
#|# This function is used to install NETSNMP  
############ STACK_TRACE_BUILDER #####################
Function_Name="$0"
Function_PATH="${Function_PATH}/${Function_Name}"
######################################################
MSG_DISPLAY "Debug4" "Current Stack : [ ${Function_PATH} ] "
PKG_INSTALL_CTRL_Sourcing_PKG_CONF

MSG_DISPLAY "Info" "Installing Package : [ ${PKG_NETSNMP} ] "

INTERNAL_ONLY_GET="${1}"

Redo_Last="Dummy"
################ NETSNMP ###########################
Internet_Http_Get "${URL_NETSNMP}" "${PKG_NETSNMP}.${Pkg_ext_tgz}" "${PWD_DLW_PKG}" ""
if [ "${EXTERNAL_ONLY_GET}" = "True" ]
   then
       MSG_DISPLAY "Info" "Get only Package : [ ${URL_NETSNMP} ] "
   else
       archive_file_extract_tgz "${PWD_DLW_PKG}" "${PKG_NETSNMP}" "${Pkg_ext_tgz}"
       Base_Compile_OutPut_Redirector="${Prefix_Log_File}_${0}_$(date +%d_%m_%y).log"
       Base_Param_type_PKG="STD"
       Base_Param_PKG_To_Compile="${PKG_NETSNMP}"
       Base_Param_Compile_Options="--prefix=${BASE_PATH_NETSNMP}"
       Base_Param_PKG_To_Compile_Option_Path=""
       Custom_Pkg_Configurator=""
       Base_Param_Make_Options="Dummy"
       Base_Param_Make_Install_Options="Dummy"
       Base_Param_Make_clean="TRUE"
       Base_Param_Post_Compile_Action="COMPILE_Magic_linker"
       Base_Param_PKG_to_link=${Base_Param_PKG_To_Compile}
       Base_INTRA_DIRS="${BASE_PATH_NETSNMP}"
       COMPILE_Generics_Base_func
fi
############### Stack_TRACE_BUILDER ################
Function_PATH="$( dirname ${Function_PATH} )"
####################################################
}




function PKG_INSTALL_CVS        # PKG_installable_ok
{
#|# This function is used whithout parameter 
#|# This function is used to install CVS  
############ STACK_TRACE_BUILDER #####################
Function_Name="$0"
Function_PATH="${Function_PATH}/${Function_Name}"
######################################################
MSG_DISPLAY "Debug4" "Current Stack : [ ${Function_PATH} ] "
PKG_INSTALL_CTRL_Sourcing_PKG_CONF

MSG_DISPLAY "Info" "Installing Package : [ ${PKG_CVS} ] "

INTERNAL_ONLY_GET="${1}"

Redo_Last="Dummy"
################ CVS ###########################
Internet_Http_Get "${URL_CVS}" "${PKG_CVS}.${Pkg_ext_tgz}" "${PWD_DLW_PKG}" ""
if [ "${EXTERNAL_ONLY_GET}" = "True" ]
   then
       MSG_DISPLAY "Info" "Get only Package : [ ${URL_CVS} ] "
   else
       archive_file_extract_tgz "${PWD_DLW_PKG}" "${PKG_CVS}" "${Pkg_ext_tgz}"
       Base_Compile_OutPut_Redirector="${Prefix_Log_File}_${0}_$(date +%d_%m_%y).log"
       Base_Param_type_PKG="STD"
       Base_Param_PKG_To_Compile="${PKG_CVS}"
       Base_Param_Compile_Options="--prefix=${BASE_PATH_CVS}"
       Base_Param_PKG_To_Compile_Option_Path=""
       Custom_Pkg_Configurator=""
       Base_Param_Make_Options="Dummy"
       Base_Param_Make_Install_Options="Dummy"
       Base_Param_Make_clean="TRUE"
       Base_Param_Post_Compile_Action="COMPILE_Magic_linker"
       Base_Param_PKG_to_link=${Base_Param_PKG_To_Compile}
       Base_INTRA_DIRS="${BASE_PATH_CVS}"
       COMPILE_Generics_Base_func
fi
############### Stack_TRACE_BUILDER ################
Function_PATH="$( dirname ${Function_PATH} )"
####################################################
}

function PKG_INSTALL_FREETYPE2        # PKG_installable_ok
{
#|# This function is used whithout parameter 
#|# This function is used to install FREETYPE2  
############ STACK_TRACE_BUILDER #####################
Function_Name="$0"
Function_PATH="${Function_PATH}/${Function_Name}"
######################################################
MSG_DISPLAY "Debug4" "Current Stack : [ ${Function_PATH} ] "
PKG_INSTALL_CTRL_Sourcing_PKG_CONF

MSG_DISPLAY "Info" "Installing Package : [ ${PKG_FREETYPE2} ] "

INTERNAL_ONLY_GET="${1}"

Redo_Last="Dummy"
################ FREETYPE2 ###########################
Internet_Http_Get "${URL_FREETYPE2}" "${PKG_FREETYPE2}.${Pkg_ext_tgz}" "${PWD_DLW_PKG}" ""
if [ "${EXTERNAL_ONLY_GET}" = "True" ]
   then
       MSG_DISPLAY "Info" "Get only Package : [ ${URL_FREETYPE2} ] "
   else
       archive_file_extract_tgz "${PWD_DLW_PKG}" "${PKG_FREETYPE2}" "${Pkg_ext_tgz}"
       Base_Compile_OutPut_Redirector="${Prefix_Log_File}_${0}_$(date +%d_%m_%y).log"
       Base_Param_type_PKG="STD"
       Base_Param_PKG_To_Compile="${PKG_FREETYPE2}"
       Base_Param_Compile_Options="--prefix=${BASE_PATH_FREETYPE2}"
       Base_Param_PKG_To_Compile_Option_Path=""
       Custom_Pkg_Configurator=""
       Base_Param_Make_Options="Dummy"
       Base_Param_Make_Install_Options="Dummy"
       Base_Param_Make_clean="TRUE"
       Base_Param_Post_Compile_Action="COMPILE_Magic_linker"
       Base_Param_PKG_to_link=${Base_Param_PKG_To_Compile}
       Base_INTRA_DIRS="${BASE_PATH_FREETYPE2}"
       COMPILE_Generics_Base_func
fi
############### Stack_TRACE_BUILDER ################
Function_PATH="$( dirname ${Function_PATH} )"
####################################################
}

function PKG_INSTALL_RRDTOOLS        # PKG_installable_ok
{
############ STACK_TRACE_BUILDER #####################
Function_Name="$0"
Function_PATH="${Function_PATH}/${Function_Name}"
######################################################
MSG_DISPLAY "Debug4" "Current Stack : [ ${Function_PATH} ] "
PKG_INSTALL_CTRL_Sourcing_PKG_CONF
MSG_DISPLAY "Info" "Needed PKG : [ ${PKG_LIBART} ] "
PKG_INSTALL_Libart
MSG_DISPLAY "Info" "Needed PKG : [ ${PKG_FREETYPE2} ] "
PKG_INSTALL_FREETYPE2
MSG_DISPLAY "Info" "Needed PKG : [ ${PKG_TCL} ] "
PKG_INSTALL_TCL
MSG_DISPLAY "Info" "Installing Package : [ ${PKG_RRDTOOLS} ] "

INTERNAL_ONLY_GET="${1}"

Redo_Last="Dummy"
################ RRDTOOLS ###########################
Internet_Http_Get "${URL_RRDTOOLS}" "${PKG_RRDTOOLS}.${Pkg_ext_tgz}" "${PWD_DLW_PKG}" ""
if [ "${EXTERNAL_ONLY_GET}" = "True" ]
   then
       MSG_DISPLAY "Info" "Get only Package : [ ${URL_RRDTOOLS} ] "
   else
       archive_file_extract_tgz "${PWD_DLW_PKG}" "${PKG_RRDTOOLS}" "${Pkg_ext_tgz}"
       Base_Compile_OutPut_Redirector="${Prefix_Log_File}_${0}_$(date +%d_%m_%y).log"
       Base_Param_type_PKG="STD"
       Base_Param_PKG_To_Compile="${PKG_RRDTOOLS}"
       Base_Param_Compile_Options="--prefix=${BASE_PATH_RRDTOOLS}"
       Base_Param_PKG_To_Compile_Option_Path=""
       Custom_Pkg_Configurator=""
       Base_Param_Make_Options="Dummy"
       Base_Param_Make_Install_Options="Dummy"
       Base_Param_Make_clean="TRUE"
       Base_Param_Post_Compile_Action="COMPILE_Magic_linker"
       Base_Param_PKG_to_link=${Base_Param_PKG_To_Compile}
       Base_INTRA_DIRS="${BASE_PATH_RRDTOOLS}"
       COMPILE_Generics_Base_func
fi
############### Stack_TRACE_BUILDER ################
Function_PATH="$( dirname ${Function_PATH} )"
####################################################
}



function PKG_INSTALL_Berkeley_Db        # PKG_installable_ok
{
############ STACK_TRACE_BUILDER #####################
Function_Name="$0"
Function_PATH="${Function_PATH}/${Function_Name}"
######################################################
MSG_DISPLAY "Debug4" "Current Stack : [ ${Function_PATH} ] "
PKG_INSTALL_CTRL_Sourcing_PKG_CONF
MSG_DISPLAY "Info" "Installing Package : [ ${PKG_BerkeleyDb} ] "

INTERNAL_ONLY_GET="${1}"

Redo_Last="Dummy"
################ BerkeleyDB ###########################
Internet_Http_Get "${URL_BerkeleyDb}" "${PKG_BerkeleyDb}.${Pkg_ext_tgz}" "${PWD_DLW_PKG}" ""
if [ "${EXTERNAL_ONLY_GET}" = "True" ]
   then
       MSG_DISPLAY "Info" "Get only Package : [ ${URL_BerkeleyDb} ] "
   else
       archive_file_extract_tgz "${PWD_DLW_PKG}" "${PKG_BerkeleyDb}" "${Pkg_ext_tgz}"
       Base_Compile_OutPut_Redirector="${Prefix_Log_File}_${0}_$(date +%d_%m_%y).log"
       Base_Param_type_PKG="CUSTOM"
       Base_Param_PKG_To_Compile="${PKG_BerkeleyDb}"
       Base_Param_Compile_Options="--prefix=${BASE_PATH_BERKELEYDB}"
       Base_Param_PKG_To_Compile_Option_Path="build_unix"
       Custom_Pkg_Configurator="../dist/configure"
       Base_Param_Make_Options="Dummy"
       Base_Param_Make_Install_Options="Dummy"
       Base_Param_Make_clean="TRUE"
       Base_Param_Post_Compile_Action="COMPILE_Magic_linker"
       Base_Param_PKG_to_link=${Base_Param_PKG_To_Compile}
       Base_INTRA_DIRS="${BASE_PATH_BERKELEYDB}"
       COMPILE_Generics_Base_func
fi
############### Stack_TRACE_BUILDER ################
Function_PATH="$( dirname ${Function_PATH} )"
####################################################
}

function PKG_INSTALL_OpenLdap         # PKG_installable_ok
{
############ STACK_TRACE_BUILDER #####################
Function_Name="$0"
Function_PATH="${Function_PATH}/${Function_Name}"
######################################################
MSG_DISPLAY "Debug4" "Current Stack : [ ${Function_PATH} ] "
PKG_INSTALL_CTRL_Sourcing_PKG_CONF
MSG_DISPLAY "Info" "Needed PKG : [ ${PKG_BerkeleyDb} ] "
PKG_INSTALL_Berkeley_Db

MSG_DISPLAY "Info" "Installing Package : [ ${PKG_OPEN_LDAP} ] "

Internet_Http_Get "${URL_OPEN_LDAP}" "openldap-stable-20060823.${Pkg_ext_tgz2}" "${PWD_DLW_PKG}" ""
cp ${PWD_DLW_PKG}/openldap-stable-20060823.${Pkg_ext_tgz2} ${PWD_DLW_PKG}/${PKG_OPEN_LDAP}.${Pkg_ext_tgz}



if [ "${EXTERNAL_ONLY_GET}" = "True" ]
   then
       MSG_DISPLAY "Info" "Get only Package : [ ${PKG_OPEN_LDAP} ] "
   else
       archive_file_extract_tgz "${PWD_DLW_PKG}" "${PKG_OPEN_LDAP}" "${Pkg_ext_tgz}"
       Base_Compile_OutPut_Redirector="${Prefix_Log_File}_${0}_$(date +%d_%m_%y).log"
       Base_Param_type_PKG="STD"
       Base_Param_PKG_To_Compile="${PKG_OPEN_LDAP}"
       Base_Param_Compile_Options="--prefix=${BASE_PATH_OPENLDAP}"
       Base_Param_PKG_To_Compile_Option_Path=""
       Base_Param_Make_Options="Dummy"
       Base_Param_Make_Install_Options="Dummy"
       Base_Param_Make_clean="TRUE"
       Base_Param_Post_Compile_Action="COMPILE_Magic_linker"
       Base_Param_PKG_to_link=${Base_Param_PKG_To_Compile}
       Base_INTRA_DIRS="${BASE_PATH_OPENLDAP}"
       COMPILE_Generics_Base_func
fi

############### Stack_TRACE_BUILDER ################
Function_PATH="$( dirname ${Function_PATH} )"
####################################################
}


function PKG_INSTALL_TCL         # PKG_installable_ok
{
############ STACK_TRACE_BUILDER #####################
Function_Name="$0"
Function_PATH="${Function_PATH}/${Function_Name}"
######################################################
MSG_DISPLAY "Debug4" "Current Stack : [ ${Function_PATH} ] "
PKG_INSTALL_CTRL_Sourcing_PKG_CONF
MSG_DISPLAY "Info" "Needed PKG : [ None ] "
MSG_DISPLAY "Info" "Installing Package : [ ${PKG_TCL} ] "

################## TCL   #####################
Internet_Http_Get "${URL_TCL}" "${PKG_TCL}.${Pkg_ext_tgz}"  "${PWD_DLW_PKG}" ""
if [ "${EXTERNAL_ONLY_GET}" = "True" ]
   then
       MSG_DISPLAY "Info" "Get only Package : [ ${PKG_TCL} ] "
   else
       archive_file_extract_tgz "${PWD_DLW_PKG}" "${PKG_TCL}" "${Pkg_ext_tgz}"
       Base_Compile_OutPut_Redirector="${Prefix_Log_File}_${0}_$(date +%d_%m_%y).log"
       Base_Param_type_PKG="CUSTOM"
       Base_Param_PKG_To_Compile="${PKG_TCL}"
       Custom_Pkg_Configurator="./unix/configure"
       Base_Param_Compile_Options="--prefix=${BASE_PATH_TCL}"
       Base_Param_PKG_To_Compile_Option_Path=""
       Base_Param_Make_Options="Dummy"
       Base_Param_Make_Install_Options="Dummy"
       Base_Param_Make_clean="TRUE"
       Base_Param_Post_Compile_Action="COMPILE_Magic_linker"
       Base_Param_PKG_to_link=${Base_Param_PKG_To_Compile}
       Base_INTRA_DIRS="${BASE_PATH_TCL}"
       COMPILE_Generics_Base_func
fi

############### Stack_TRACE_BUILDER ################
Function_PATH="$( dirname ${Function_PATH} )"
####################################################
}


function PKG_INSTALL_TK      # PKG_installable_ok
{
############ STACK_TRACE_BUILDER #####################
Function_Name="$0"
Function_PATH="${Function_PATH}/${Function_Name}"
######################################################
MSG_DISPLAY "Debug4" "Current Stack : [ ${Function_PATH} ] "
PKG_INSTALL_CTRL_Sourcing_PKG_CONF
MSG_DISPLAY "Info" "Needed PKG : [ ${PKG_TCL} ] "
PKG_INSTALL_TCL
MSG_DISPLAY "Info" "Installing Package : [ ${PKG_TK} ] "

################## TK   #####################
Internet_Http_Get "${URL_TK}" "${PKG_TK}.${Pkg_ext_tgz}"  "${PWD_DLW_PKG}" ""
if [ "${EXTERNAL_ONLY_GET}" = "True" ]
   then
       MSG_DISPLAY "Info" "Get only Package : [ ${PKG_TK} ] "
   else
       archive_file_extract_tgz "${PWD_DLW_PKG}" "${PKG_TK}" "${Pkg_ext_tgz}"
       Base_Compile_OutPut_Redirector="${Prefix_Log_File}_${0}_$(date +%d_%m_%y).log"
       Base_Param_type_PKG="CUSTOM"
       Custom_Pkg_Configurator="./unix/configure"
       Base_Param_PKG_To_Compile="${PKG_TK}"
       Base_Param_Compile_Options="--prefix=${BASE_PATH_TCL} --with-tcl=${BASE_PATH_TCL}/lib without-x"
       Base_Param_PKG_To_Compile_Option_Path=""
       Base_Param_Make_Options="Dummy"
       Base_Param_Make_Install_Options="Dummy"
       Base_Param_Make_clean="TRUE"
       Base_Param_Post_Compile_Action="COMPILE_Magic_linker"
       Base_Param_PKG_to_link=${Base_Param_PKG_To_Compile}
       Base_INTRA_DIRS="${BASE_PATH_TK}"
       COMPILE_Generics_Base_func
fi

############### Stack_TRACE_BUILDER ################
Function_PATH="$( dirname ${Function_PATH} )"
####################################################
}



function PKG_INSTALL_EXPECT                            # PKG_installable_ok
{
############ STACK_TRACE_BUILDER #####################
Function_Name="$0"
Function_PATH="${Function_PATH}/${Function_Name}"
######################################################
MSG_DISPLAY "Debug4" "Current Stack : [ ${Function_PATH} ] "
PKG_INSTALL_CTRL_Sourcing_PKG_CONF
MSG_DISPLAY "Info" "Needed PKG : [ ${PKG_TK} ] "
#PKG_INSTALL_TK
MSG_DISPLAY "Info" "Installing Package : [ ${PKG_EXPECT} ] "

################## EXPECT   #####################
Internet_Http_Get "${URL_EXPECT}" "${PKG_EXPECT}.${Pkg_ext_tgz}"  "${PWD_DLW_PKG}" ""
if [ "${EXTERNAL_ONLY_GET}" = "True" ]
   then
       MSG_DISPLAY "Info" "Get only Package : [ ${PKG_EXPECT} ] "
   else
       archive_file_extract_tgz "${PWD_DLW_PKG}" "${PKG_EXPECT}" "${Pkg_ext_tgz}"
       Base_Compile_OutPut_Redirector="${Prefix_Log_File}_${0}_$(date +%d_%m_%y).log"
       Base_Param_type_PKG="STD"
       Base_Param_PKG_To_Compile="${PKG_EXPECT}"
       Base_Param_Compile_Options="--prefix=${BASE_PATH_EXPECT} "
       Base_Param_PKG_To_Compile_Option_Path=""
       Base_Param_Make_Options="Dummy"
       Base_Param_Make_Install_Options="Dummy"
       Base_Param_Make_clean="TRUE"
       Base_Param_Post_Compile_Action="COMPILE_Magic_linker"
       Base_Param_PKG_to_link=${Base_Param_PKG_To_Compile}
       Base_INTRA_DIRS="${BASE_PATH_EXPECT}"
       COMPILE_Generics_Base_func
fi

############### Stack_TRACE_BUILDER ################
Function_PATH="$( dirname ${Function_PATH} )"
####################################################
}



function PKG_INSTALL_EXPAT                       # PKG_installable_ok
{
############ STACK_TRACE_BUILDER #####################
Function_Name="$0"
Function_PATH="${Function_PATH}/${Function_Name}"
######################################################
MSG_DISPLAY "Debug4" "Current Stack : [ ${Function_PATH} ] "
PKG_INSTALL_CTRL_Sourcing_PKG_CONF
MSG_DISPLAY "Info" "Needed PKG : [ None ] "
MSG_DISPLAY "Info" "Installing Package : [ ${PKG_EXPAT} ] "

################## EXPAT   #####################
Internet_Http_Get "${URL_EXPAT}" "${PKG_EXPAT}.${Pkg_ext_tgz}"  "${PWD_DLW_PKG}" ""
if [ "${EXTERNAL_ONLY_GET}" = "True" ]
   then
       MSG_DISPLAY "Info" "Get only Package : [ ${PKG_EXPAT} ] "
   else
       archive_file_extract_tgz "${PWD_DLW_PKG}" "${PKG_EXPAT}" "${Pkg_ext_tgz}"
       Base_Compile_OutPut_Redirector="${Prefix_Log_File}_${0}_$(date +%d_%m_%y).log"
       Base_Param_type_PKG="STD"
       Base_Param_PKG_To_Compile="${PKG_EXPAT}"
       Base_Param_Compile_Options="--prefix=${BASE_PATH_EXPAT}  --with-gnu-ld "
       Base_Param_PKG_To_Compile_Option_Path=""
       Base_Param_Make_Options="Dummy"
       Base_Param_Make_Install_Options="Dummy"
       Base_Param_Make_clean="TRUE"
       Base_Param_Post_Compile_Action="COMPILE_Magic_linker"
       Base_Param_PKG_to_link=${Base_Param_PKG_To_Compile}
       Base_INTRA_DIRS="${BASE_PATH_EXPAT}"
       COMPILE_Generics_Base_func
fi

############### Stack_TRACE_BUILDER ################
Function_PATH="$( dirname ${Function_PATH} )"
####################################################
}


function PKG_INSTALL_xml                        # PKG_installable_ok
{
############ STACK_TRACE_BUILDER #####################
Function_Name="$0"
Function_PATH="${Function_PATH}/${Function_Name}"
######################################################
MSG_DISPLAY "Debug4" "Current Stack : [ ${Function_PATH} ] "
PKG_INSTALL_CTRL_Sourcing_PKG_CONF
MSG_DISPLAY "Info" "Needed PKG : [ None ] "
MSG_DISPLAY "Info" "Installing Package : [ ${PKG_XML} ] "

################## XML   #####################
Internet_Http_Get "${URL_XML}" "${PKG_XML}.${Pkg_ext_tgz}"  "${PWD_DLW_PKG}" ""
if [ "${EXTERNAL_ONLY_GET}" = "True" ]
   then
       MSG_DISPLAY "Info" "Get only Package : [ ${PKG_XML} ] "
   else
       archive_file_extract_tgz "${PWD_DLW_PKG}" "${PKG_XML}" "${Pkg_ext_tgz}"
       Base_Compile_OutPut_Redirector="${Prefix_Log_File}_${0}_$(date +%d_%m_%y).log"
       Base_Param_type_PKG="STD"
       Base_Param_PKG_To_Compile="${PKG_XML}"
       Base_Param_Compile_Options="--prefix=${BASE_PATH_XML}  --with-zlib=${BASE_PATH_ZLIB} --enable-static --disable-libtool-lock  --enable-ipv6=no --with-gnu-ld --with-pic --with-c14n --with-catalog --with-docbook --with-fexceptions --with-ftp --with-history --with-html  --with-iconv --with-legacy --with-minimum --with-output --with-pattern --with-push --with-python --with-reader --with-readline --with-regexps --with-sax1 --with-schemas --with-schematron --with-threads --with-thread-alloc --with-tree  --with-valid --with-writer --with-xinclude --with-xpath  -with-xptr "
       Base_Param_PKG_To_Compile_Option_Path=""
       Base_Param_Make_Options="Dummy"
       Base_Param_Make_Install_Options="Dummy"
       Base_Param_Make_clean="TRUE"
       Base_Param_Post_Compile_Action="COMPILE_Magic_linker"
       Base_Param_PKG_to_link=${Base_Param_PKG_To_Compile}
       Base_INTRA_DIRS="${BASE_PATH_XML}"
       COMPILE_Generics_Base_func
fi

############### Stack_TRACE_BUILDER ################
Function_PATH="$( dirname ${Function_PATH} )"
####################################################
}

function PKG_INSTALL_PNG                        # PKG_installable_ok
{
############ STACK_TRACE_BUILDER #####################
Function_Name="$0"
Function_PATH="${Function_PATH}/${Function_Name}"
######################################################
MSG_DISPLAY "Debug4" "Current Stack : [ ${Function_PATH} ] "
PKG_INSTALL_CTRL_Sourcing_PKG_CONF
MSG_DISPLAY "Info" "Needed PKG : [ None ] "
MSG_DISPLAY "Info" "Installing Package : [ ${PKG_PNG} ] "

################## PNG   #####################
Internet_Http_Get "${URL_PNG}" "${PKG_PNG}.${Pkg_ext_tgz}"  "${PWD_DLW_PKG}" ""
if [ "${EXTERNAL_ONLY_GET}" = "True" ]
   then
       MSG_DISPLAY "Info" "Get only Package : [ ${PKG_PNG} ] "
   else
       archive_file_extract_tgz "${PWD_DLW_PKG}" "${PKG_PNG}" "${Pkg_ext_tgz}"
       Base_Compile_OutPut_Redirector="${Prefix_Log_File}_${0}_$(date +%d_%m_%y).log"
       Base_Param_type_PKG="STD"
       Base_Param_PKG_To_Compile="${PKG_PNG}"
       Base_Param_Compile_Options="--prefix=${BASE_PATH_PNG} --with-libpng-compat "
       Base_Param_PKG_To_Compile_Option_Path=""
       Base_Param_Make_Options="Dummy"
       Base_Param_Make_Install_Options="Dummy"
       Base_Param_Make_clean="TRUE"
       Base_Param_Post_Compile_Action="COMPILE_Magic_linker"
       Base_Param_PKG_to_link=${Base_Param_PKG_To_Compile}
       Base_INTRA_DIRS="${BASE_PATH_PNG}"
       COMPILE_Generics_Base_func
fi

############### Stack_TRACE_BUILDER ################
Function_PATH="$( dirname ${Function_PATH} )"
####################################################
}


function PKG_INSTALL_xsl             # PKG_installable_ok
{
############ STACK_TRACE_BUILDER #####################
Function_Name="$0"
Function_PATH="${Function_PATH}/${Function_Name}"
######################################################
MSG_DISPLAY "Debug4" "Current Stack : [ ${Function_PATH} ] "
PKG_INSTALL_CTRL_Sourcing_PKG_CONF
MSG_DISPLAY "Info" "Needed PKG : [ ${PKG_XML} ] "
PKG_INSTALL_xml
MSG_DISPLAY "Info" "Installing Package : [ ${PKG_XSL} ] "

################## XSL   #####################
Internet_Http_Get "${URL_XSL}" "${PKG_XSL}.${Pkg_ext_tgz}"  "${PWD_DLW_PKG}" ""

if [ "${EXTERNAL_ONLY_GET}" = "True" ]
   then
       MSG_DISPLAY "Info" "Get only Package : [ ${PKG_XSL} ] "
   else
       archive_file_extract_tgz "${PWD_DLW_PKG}" "${PKG_XSL}" "${Pkg_ext_tgz}"
       Base_Compile_OutPut_Redirector="${Prefix_Log_File}_${0}_$(date +%d_%m_%y).log"
       Base_Param_type_PKG="STD"
       Base_Param_PKG_To_Compile="${PKG_XSL}"
       Base_Param_Compile_Options="--prefix=${BASE_PATH_XSL} -with-libxml-prefix=${BASE_PATH_XML} "
       Base_Param_PKG_To_Compile_Option_Path=""
       Base_Param_Make_Options="Dummy"
       Base_Param_Make_Install_Options="Dummy"
       Base_Param_Make_clean="TRUE"
       Base_Param_Post_Compile_Action="COMPILE_Magic_linker"
       Base_Param_PKG_to_link=${Base_Param_PKG_To_Compile}
       Base_INTRA_DIRS="${BASE_PATH_XSL}"
       COMPILE_Generics_Base_func
fi

############### Stack_TRACE_BUILDER ################
Function_PATH="$( dirname ${Function_PATH} )"
####################################################
}

function PKG_INSTALL_zlib                 # PKG_installable_ok
{
############ STACK_TRACE_BUILDER #####################
Function_Name="$0"
Function_PATH="${Function_PATH}/${Function_Name}"
######################################################
MSG_DISPLAY "Debug4" "Current Stack : [ ${Function_PATH} ] "
PKG_INSTALL_CTRL_Sourcing_PKG_CONF
MSG_DISPLAY "Info" "Needed PKG : [ None ] "
MSG_DISPLAY "Info" "Installing Package : [ ${PKG_ZLIB} ] "

##################  Flex   #####################
Internet_Http_Get "${URL_ZLIB}" "${PKG_ZLIB}.${Pkg_ext_tgz}"  "${PWD_DLW_PKG}" ""
if [ "${EXTERNAL_ONLY_GET}" = "True" ]
   then
       MSG_DISPLAY "Info" "Get only Package : [ ${PKG_ZLIB} ] "
   else
        archive_file_extract_tgz "${PWD_DLW_PKG}" "${PKG_ZLIB}" "${Pkg_ext_tgz}"
        Base_Compile_OutPut_Redirector="${Prefix_Log_File}_${0}_$(date +%d_%m_%y).log"
        Base_Param_type_PKG="STD"
        Base_Param_PKG_To_Compile="${PKG_ZLIB}"
        Base_Param_Compile_Options="--prefix=${BASE_PATH_ZLIB}"
        Base_Param_PKG_To_Compile_Option_Path=""
        Base_Param_Make_Options="Dummy"
        Base_Param_Make_Install_Options="Dummy"
        Base_Param_Make_clean="TRUE"
        Base_Param_Post_Compile_Action="COMPILE_Magic_linker"
        Base_Param_PKG_to_link=${Base_Param_PKG_To_Compile}
        Base_INTRA_DIRS="${BASE_PATH_ZLIB}"
        COMPILE_Generics_Base_func
fi

############### Stack_TRACE_BUILDER ################
Function_PATH="$( dirname ${Function_PATH} )"
####################################################
}

function PKG_INSTALL_Readline                    # PKG_installable_ok
{
############ STACK_TRACE_BUILDER #####################
Function_Name="$0"
Function_PATH="${Function_PATH}/${Function_Name}"
######################################################
MSG_DISPLAY "Debug4" "Current Stack : [ ${Function_PATH} ] "
PKG_INSTALL_CTRL_Sourcing_PKG_CONF
MSG_DISPLAY "Info" "Needed PKG : [ None ] "
MSG_DISPLAY "Info" "Installing Package : [ ${PKG_READLINE} ] "

##################  READLINE   #####################
Internet_Http_Get "${URL_READLINE}" "${PKG_READLINE}.${Pkg_ext_tgz}" "${PWD_DLW_PKG}" ""

if [ "${EXTERNAL_ONLY_GET}" = "True" ]
   then
       MSG_DISPLAY "Info" "Get only Package : [ ${PKG_READLINE} ] "
   else
       archive_file_extract_tgz "${PWD_DLW_PKG}" "${PKG_READLINE}" "${Pkg_ext_tgz}"
       Base_Compile_OutPut_Redirector="${Prefix_Log_File}_${0}_$(date +%d_%m_%y).log"
       Base_Param_type_PKG="STD"
       Base_Param_PKG_To_Compile="${PKG_READLINE}"
       Base_Param_Compile_Options="--prefix=${BASE_PATH_READLINE}"
       Base_Param_PKG_To_Compile_Option_Path=""
       Base_Param_Make_Options="Dummy"
       Base_Param_Make_Install_Options="Dummy"
       Base_Param_Make_clean="TRUE"
       Base_Param_Post_Compile_Action="COMPILE_Magic_linker"
       Base_Param_PKG_to_link=${Base_Param_PKG_To_Compile}
       Base_INTRA_DIRS="${BASE_PATH_READLINE}"
       COMPILE_Generics_Base_func
fi

############### Stack_TRACE_BUILDER ################
Function_PATH="$( dirname ${Function_PATH} )"
####################################################
}

function PKG_INSTALL_Flex                # PKG_installable_ok
{
############ STACK_TRACE_BUILDER #####################
Function_Name="$0"
Function_PATH="${Function_PATH}/${Function_Name}"
######################################################
MSG_DISPLAY "Debug4" "Current Stack : [ ${Function_PATH} ] "
PKG_INSTALL_CTRL_Sourcing_PKG_CONF
MSG_DISPLAY "Info" "Needed PKG : [ None ] "
MSG_DISPLAY "Info" "Installing Package : [ ${PKG_FLEX} ] "

################## FLEX  #########################
Internet_Http_Get "${URL_FLEX}" "${PKG_FLEX}.${Pkg_ext_tgz}" "${PWD_DLW_PKG}" ""

if [ "${EXTERNAL_ONLY_GET}" = "True" ]
   then
       MSG_DISPLAY "Info" "Get only Package : [ ${PKG_FLEX} ] "
   else
       archive_file_extract_tgz "${PWD_DLW_PKG}" "${PKG_FLEX}" "${Pkg_ext_tgz}"
       Base_Compile_OutPut_Redirector="${Prefix_Log_File}_${0}_$(date +%d_%m_%y).log"
       Base_Param_type_PKG="STD"
       Base_Param_PKG_To_Compile="${PKG_FLEX}"
       Base_Param_Compile_Options="--prefix=${BASE_PATH_FLEX}"
       Base_Param_PKG_To_Compile_Option_Path=""
       Base_Param_Make_Options="Dummy"
       Base_Param_Make_Install_Options="Dummy"
       Base_Param_Make_clean="TRUE"
       Base_Param_Post_Compile_Action="COMPILE_Magic_linker"
       Base_Param_PKG_to_link=${Base_Param_PKG_To_Compile}
       Base_INTRA_DIRS="${BASE_PATH_FLEX}"
       COMPILE_Generics_Base_func
fi

############### Stack_TRACE_BUILDER ################
Function_PATH="$( dirname ${Function_PATH} )"
####################################################
}

function PKG_INSTALL_Mhash                                   # PKG_installable_ok
{
############ STACK_TRACE_BUILDER #####################
Function_Name="$0"
Function_PATH="${Function_PATH}/${Function_Name}"
######################################################
MSG_DISPLAY "Debug4" "Current Stack : [ ${Function_PATH} ] "
PKG_INSTALL_CTRL_Sourcing_PKG_CONF
MSG_DISPLAY "Info" "Needed PKG : [ None ] "
MSG_DISPLAY "Info" "Installing Package : [ ${PKG_MHASH} ] "

################# MHASH  ##########################
Internet_Http_Get "${URL_MHASH}" "${PKG_MHASH}.${Pkg_ext_tgz}" "${PWD_DLW_PKG}" ""

if [ "${EXTERNAL_ONLY_GET}" = "True" ]
   then
       MSG_DISPLAY "Info" "Get only Package : [ ${PKG_MHASH} ] "
   else
       archive_file_extract_tgz "${PWD_DLW_PKG}" "${PKG_MHASH}" "${Pkg_ext_tgz}"
       Base_Compile_OutPut_Redirector="${Prefix_Log_File}_${0}_$(date +%d_%m_%y).log"
       Base_Param_type_PKG="STD"
       Base_Param_PKG_To_Compile="${PKG_MHASH}"
       Base_Param_Compile_Options="--prefix=${BASE_PATH_MHASH}"
       Base_Param_PKG_To_Compile_Option_Path=""
       Base_Param_Make_Options="Dummy"
       Base_Param_Make_Install_Options="Dummy"
       Base_Param_Make_clean="TRUE"
       Base_Param_Post_Compile_Action="COMPILE_Magic_linker"
       Base_Param_PKG_to_link=${Base_Param_PKG_To_Compile}
       Base_INTRA_DIRS="${BASE_PATH_MHASH}"
       COMPILE_Generics_Base_func
fi

############### Stack_TRACE_BUILDER ################
Function_PATH="$( dirname ${Function_PATH} )"
####################################################
}

function PKG_INSTALL_Libmcrypt                              # PKG_installable_ok
{
############ STACK_TRACE_BUILDER #####################
Function_Name="$0"
Function_PATH="${Function_PATH}/${Function_Name}"
######################################################
MSG_DISPLAY "Debug4" "Current Stack : [ ${Function_PATH} ] "
PKG_INSTALL_CTRL_Sourcing_PKG_CONF
MSG_DISPLAY "Info" "Needed PKG : [${PKG_MHASH}] "
PKG_INSTALL_Mhash
MSG_DISPLAY "Info" "Installing Package : [ ${PKG_LIB_MCRYPT} ] "

################# LibMCrypt 2.5.7 ##########################

Internet_Http_Get "${URL_MCRYPT}" "${PKG_LIB_MCRYPT}.${Pkg_ext_tgz}" "${PWD_DLW_PKG}" ""

if [ "${EXTERNAL_ONLY_GET}" = "True" ]
   then
       MSG_DISPLAY "Info" "Get only Package : [ ${PKG_LIB_MCRYPT} ] "
   else
       archive_file_extract_tgz "${PWD_DLW_PKG}" "${PKG_LIB_MCRYPT}" "${Pkg_ext_tgz}"
       Base_Compile_OutPut_Redirector="${Prefix_Log_File}_${0}_$(date +%d_%m_%y).log"
       Base_Param_type_PKG="STD"
       Base_Param_PKG_To_Compile="${PKG_LIB_MCRYPT}"
       Base_Param_Compile_Options="--prefix=${BASE_PATH_LIBMCRYPT}"
       Base_Param_PKG_To_Compile_Option_Path=""
       Base_Param_Make_Options="Dummy"
       Base_Param_Make_Install_Options="Dummy"
       Base_Param_Make_clean="TRUE"
       Base_Param_Post_Compile_Action="COMPILE_Magic_linker"
       Base_Param_PKG_to_link=${Base_Param_PKG_To_Compile}
       Base_INTRA_DIRS="${BASE_PATH_LIBMCRYPT}"
       COMPILE_Generics_Base_func
fi
############### Stack_TRACE_BUILDER ################
Function_PATH="$( dirname ${Function_PATH} )"
####################################################
}

function PKG_INSTALL_Mcrypt                            # PKG_installable_ok
{
############ STACK_TRACE_BUILDER #####################
Function_Name="$0"
Function_PATH="${Function_PATH}/${Function_Name}"
######################################################
MSG_DISPLAY "Debug4" "Current Stack : [ ${Function_PATH} ] "
PKG_INSTALL_CTRL_Sourcing_PKG_CONF
MSG_DISPLAY "Info" "Needed PKG : [ ${PKG_LIB_MCRYPT} ] "
PKG_INSTALL_Libmcrypt
MSG_DISPLAY "Info" "Installing Package : [ ${PKG_MCRYPT} ] "

################# Mcrypt 2.6.4  ############################
Internet_Http_Get "${URL_MCRYPT}" "${PKG_MCRYPT}.${Pkg_ext_tgz}" "${PWD_DLW_PKG}" ""

if [ "${EXTERNAL_ONLY_GET}" = "True" ]
   then
       MSG_DISPLAY "Info" "Get only Package : [ ${PKG_MCRYPT} ] "
   else
       archive_file_extract_tgz "${PWD_DLW_PKG}" "${PKG_MCRYPT}" "${Pkg_ext_tgz}"
       Base_Compile_OutPut_Redirector="${Prefix_Log_File}_${0}_$(date +%d_%m_%y).log"
       Base_Param_type_PKG="STD"
       Base_Param_PKG_To_Compile="${PKG_MCRYPT}"
       Base_Param_Compile_Options="--prefix=${BASE_PATH_MCRYPT} --with-libmcrypt-prefix=${BASE_PATH_LIBMCRYPT}"
       Base_Param_PKG_To_Compile_Option_Path=""
       Base_Param_Make_Options="Dummy"
       Base_Param_Make_Install_Options="Dummy"
       Base_Param_Make_clean="TRUE"
       Base_Param_Post_Compile_Action="COMPILE_Magic_linker"
       Base_Param_PKG_to_link=${Base_Param_PKG_To_Compile}
       Base_INTRA_DIRS="${BASE_PATH_MCRYPT}"
       COMPILE_Generics_Base_func
fi

############### Stack_TRACE_BUILDER ################
Function_PATH="$( dirname ${Function_PATH} )"
####################################################
}

function PKG_INSTALL_OpenSsl                           # PKG_installable_ok
{
############ STACK_TRACE_BUILDER #####################
Function_Name="$0"
Function_PATH="${Function_PATH}/${Function_Name}"
######################################################
MSG_DISPLAY "Debug4" "Current Stack : [ ${Function_PATH} ] "
PKG_INSTALL_CTRL_Sourcing_PKG_CONF
MSG_DISPLAY "Info" "Needed PKG : [ ${PKG_MCRYPT} ] "
PKG_INSTALL_Mcrypt
MSG_DISPLAY "Info" "Installing Package : [ ${PKG_OPENSSL} ] "


################# OpenSSL 0.9.7 ############################
Internet_Http_Get "${URL_OPENSSL}" "${PKG_OPENSSL}.${Pkg_ext_tgz}" "${PWD_DLW_PKG}" ""

if [ "${EXTERNAL_ONLY_GET}" = "True" ]
   then
       MSG_DISPLAY "Info" "Get only Package : [ ${PKG_OPENSSL} ] "
   else
       archive_file_extract_tgz "${PWD_DLW_PKG}" "${PKG_OPENSSL}" "${Pkg_ext_tgz}"
       Base_Compile_OutPut_Redirector="${Prefix_Log_File}_${0}_$(date +%d_%m_%y).log"
       Base_Param_type_PKG="STD"
       Base_Param_PKG_To_Compile="${PKG_OPENSSL}"
       Base_Param_Compile_Options="--prefix=${BASE_PATH_OPENSSL} --openssldir=${BASE_PATH_OPENSSL} linux-elf "
       Base_Param_PKG_To_Compile_Option_Path=""
       Base_Param_Make_Options="Dummy"
       Base_Param_Make_Install_Options="Dummy"
       Base_Param_Make_clean="TRUE"
       Base_Param_Post_Compile_Action="COMPILE_Magic_linker"
       Base_Param_PKG_to_link=${Base_Param_PKG_To_Compile}
       Base_INTRA_DIRS="${BASE_PATH_OPENSSL}"
       COMPILE_Generics_Base_func
fi

############### Stack_TRACE_BUILDER ################
Function_PATH="$( dirname ${Function_PATH} )"
####################################################
}

function PKG_INSTALL_GD                              # PKG_installable_ok
{
############ STACK_TRACE_BUILDER #####################
Function_Name="$0"
Function_PATH="${Function_PATH}/${Function_Name}"
######################################################
MSG_DISPLAY "Debug4" "Current Stack : [ ${Function_PATH} ] "
PKG_INSTALL_CTRL_Sourcing_PKG_CONF
MSG_DISPLAY "Info" "Needed PKG : [ ${PKG_PNG} ] "
PKG_INSTALL_PNG
MSG_DISPLAY "Info" "Installing Package : [ ${PKG_GD} ] "

################  GD 2.0.33   ########################
Internet_Http_Get "${URL_GD}" "${PKG_GD}.${Pkg_ext_tgz}" "${PWD_DLW_PKG}" ""

if [ "${EXTERNAL_ONLY_GET}" = "True" ]
   then
       MSG_DISPLAY "Info" "Get only Package : [ ${PKG_GD} ] "
   else
       archive_file_extract_tgz "${PWD_DLW_PKG}" "${PKG_GD}" "${Pkg_ext_tgz}"
       Base_Compile_OutPut_Redirector="${Prefix_Log_File}_${0}_$(date +%d_%m_%y).log"
       Base_Param_type_PKG="STD"
       Base_Param_PKG_To_Compile="${PKG_GD}"
       Base_Param_Compile_Options="--prefix=${BASE_PATH_GD} --with-png=${BASE_PATH_PNG}"
       Base_Param_PKG_To_Compile_Option_Path=""
       Base_Param_Make_Options="Dummy"
       Base_Param_Make_Install_Options="Dummy"
       Base_Param_Make_clean="TRUE"
       Base_Param_Post_Compile_Action="COMPILE_Magic_linker"
       Base_Param_PKG_to_link=${Base_Param_PKG_To_Compile}
       Base_INTRA_DIRS="${BASE_PATH_GD}"
       COMPILE_Generics_Base_func
fi

############### Stack_TRACE_BUILDER ################
Function_PATH="$( dirname ${Function_PATH} )"
####################################################
}

function PKG_INSTALL_Libart                           # PKG_installable_ok
{
############ STACK_TRACE_BUILDER #####################
Function_Name="$0"
Function_PATH="${Function_PATH}/${Function_Name}"
######################################################
MSG_DISPLAY "Debug4" "Current Stack : [ ${Function_PATH} ] "
PKG_INSTALL_CTRL_Sourcing_PKG_CONF
MSG_DISPLAY "Info" "Needed PKG : [ NONE ] "
MSG_DISPLAY "Info" "Installing Package : [ ${PKG_LIBART} ] "

################  LIBART     ########################
Internet_Http_Get "${URL_LIBART}" "${PKG_LIBART}.${Pkg_ext_tgz}" "${PWD_DLW_PKG}" ""

if [ "${EXTERNAL_ONLY_GET}" = "True" ]
   then
       MSG_DISPLAY "Info" "Get only Package : [ ${PKG_LIBART} ] "
   else
       archive_file_extract_tgz "${PWD_DLW_PKG}" "${PKG_LIBART}" "${Pkg_ext_tgz}"
       Base_Compile_OutPut_Redirector="${Prefix_Log_File}_${0}_$(date +%d_%m_%y).log"
       Base_Param_type_PKG="STD"
       Base_Param_PKG_To_Compile="${PKG_LIBART}"
       Base_Param_Compile_Options="--prefix=${BASE_PATH_LIBART}"
       Base_Param_PKG_To_Compile_Option_Path=""
       Base_Param_Make_Options="Dummy"
       Base_Param_Make_Install_Options="Dummy"
       Base_Param_Make_clean="TRUE"
       Base_Param_Post_Compile_Action="COMPILE_Magic_linker"
       Base_Param_PKG_to_link=${Base_Param_PKG_To_Compile}
       Base_INTRA_DIRS="${BASE_PATH_LIBART}"
       COMPILE_Generics_Base_func
fi
############### Stack_TRACE_BUILDER ################
Function_PATH="$( dirname ${Function_PATH} )"
####################################################
}


function PKG_INSTALL_Rrdtool                          # PKG_installable_ok
{
############ STACK_TRACE_BUILDER #####################
Function_Name="$0"
Function_PATH="${Function_PATH}/${Function_Name}"
######################################################
MSG_DISPLAY "Debug4" "Current Stack : [ ${Function_PATH} ] "
PKG_INSTALL_CTRL_Sourcing_PKG_CONF
MSG_DISPLAY "Info" "Needed PKG : [ ${PKG_LIBART} ] "
PKG_INSTALL_Libart
MSG_DISPLAY "Info" "Installing Package : [ ${PKG_RRD} ] "

################  RRDTOOL     ########################
Internet_Http_Get "${URL_RRD}" "${PKG_RRD}.${Pkg_ext_tgz}" "${PWD_DLW_PKG}" ""


if [ "${EXTERNAL_ONLY_GET}" = "True" ]
   then
       MSG_DISPLAY "Info" "Get only Package : [ ${PKG_RRD} ] "
   else
       archive_file_extract_tgz "${PWD_DLW_PKG}" "${PKG_RRD}" "${Pkg_ext_tgz}"
       Base_Compile_OutPut_Redirector="${Prefix_Log_File}_${0}_$(date +%d_%m_%y).log"
       Base_Param_type_PKG="STD"
       Base_Param_PKG_To_Compile="${PKG_RRD}-1.2.15"
       Base_Param_Compile_Options="--prefix=${BASE_PATH_RRDTOOL}"
       Base_Param_PKG_To_Compile_Option_Path=""
       Base_Param_Make_Options="Dummy"
       Base_Param_Make_Install_Options="Dummy"
       Base_Param_Make_clean="TRUE"
       Base_Param_Post_Compile_Action="COMPILE_Magic_linker"
       Base_Param_PKG_to_link=${Base_Param_PKG_To_Compile}
       Base_INTRA_DIRS="${BASE_PATH_RRDTOOL}"
       COMPILE_Generics_Base_func
fi
############### Stack_TRACE_BUILDER ################
Function_PATH="$( dirname ${Function_PATH} )"
####################################################
}



function PKG_INSTALL_LIBIDN                           # PKG_installable_ok
{
############ STACK_TRACE_BUILDER #####################
Function_Name="$0"
Function_PATH="${Function_PATH}/${Function_Name}"
######################################################
MSG_DISPLAY "Debug4" "Current Stack : [ ${Function_PATH} ] "
PKG_INSTALL_CTRL_Sourcing_PKG_CONF
MSG_DISPLAY "Info" "Needed PKG : [ None ] "
MSG_DISPLAY "Info" "Installing Package : [ ${PKG_LIBIDN} ] "

################  LIBIDN        ########################
Internet_Http_Get "${URL_LIBIDN}" "${PKG_LIBIDN}.${Pkg_ext_tgz}" "${PWD_DLW_PKG}" ""

if [ "${EXTERNAL_ONLY_GET}" = "True" ]
   then
       MSG_DISPLAY "Info" "Get only Package : [ ${PKG_LIBIDN} ] "
   else
       archive_file_extract_tgz "${PWD_DLW_PKG}" "${PKG_LIBIDN}" "${Pkg_ext_tgz}"
       Base_Compile_OutPut_Redirector="${Prefix_Log_File}_${0}_$(date +%d_%m_%y).log"
       Base_Param_type_PKG="STD"
       Base_Param_PKG_To_Compile="${PKG_LIBIDN}"
       Base_Param_Compile_Options="--prefix=${BASE_PATH_LIBIDN}  --enable-static --disable-csharp"
       Base_Param_PKG_To_Compile_Option_Path=""
       Base_Param_Make_Options="Dummy"
       Base_Param_Make_Install_Options="Dummy"
       Base_Param_Make_clean="TRUE"
       Base_Param_Post_Compile_Action="COMPILE_Magic_linker"
       Base_Param_PKG_to_link=${Base_Param_PKG_To_Compile}
       Base_INTRA_DIRS="${BASE_PATH_LIBIDN}"
       COMPILE_Generics_Base_func
fi


############### Stack_TRACE_BUILDER ################
Function_PATH="$( dirname ${Function_PATH} )"
####################################################
}



function PKG_INSTALL_Curl                             # PKG_installable_ok
{
############ STACK_TRACE_BUILDER #####################
Function_Name="$0"
Function_PATH="${Function_PATH}/${Function_Name}"
######################################################
MSG_DISPLAY "Debug4" "Current Stack : [ ${Function_PATH} ] "
PKG_INSTALL_CTRL_Sourcing_PKG_CONF
MSG_DISPLAY "Info" "Needed PKG : [ LIBIDN ] "
PKG_INSTALL_LIBIDN
MSG_DISPLAY "Info" "Installing Package : [ ${PKG_CURL} ] "

################  CURL        ########################
Internet_Http_Get "${URL_CURL}" "${PKG_CURL}.${Pkg_ext_tgz}" "${PWD_DLW_PKG}" ""

if [ "${EXTERNAL_ONLY_GET}" = "True" ]
   then
       MSG_DISPLAY "Info" "Get only Package : [ ${PKG_CURL} ] "
   else
       archive_file_extract_tgz "${PWD_DLW_PKG}" "${PKG_CURL}" "${Pkg_ext_tgz}"
       Base_Compile_OutPut_Redirector="${Prefix_Log_File}_${0}_$(date +%d_%m_%y).log"
       Base_Param_type_PKG="STD"
       Base_Param_PKG_To_Compile="${PKG_CURL}"
       Base_Param_Compile_Options="--prefix=${BASE_PATH_CURL} --enable-static --with-libidn=${BASE_PATH_LIBIDN}"
       Base_Param_PKG_To_Compile_Option_Path=""
       Base_Param_Make_Options="Dummy"
       Base_Param_Make_Install_Options="Dummy"
       Base_Param_Make_clean="TRUE"
       Base_Param_Post_Compile_Action="COMPILE_Magic_linker"
       Base_Param_PKG_to_link=${Base_Param_PKG_To_Compile}
       Base_INTRA_DIRS="${BASE_PATH_CURL}"
       COMPILE_Generics_Base_func
fi


############### Stack_TRACE_BUILDER ################
Function_PATH="$( dirname ${Function_PATH} )"
####################################################
}


function PKG_INSTALL_Re2c                             # PKG_installable_ok
{
############ STACK_TRACE_BUILDER #####################
Function_Name="$0"
Function_PATH="${Function_PATH}/${Function_Name}"
######################################################
MSG_DISPLAY "Debug4" "Current Stack : [ ${Function_PATH} ] "
PKG_INSTALL_CTRL_Sourcing_PKG_CONF
MSG_DISPLAY "Info" "Needed PKG : [ NONE ] "
MSG_DISPLAY "Info" "Installing Package : [ ${PKG_RE2C} ] "

################# Re2C  ##############################
Internet_Http_Get "${URL_RE2C}" "${PKG_RE2C}.${Pkg_ext_tgz}" "${PWD_DLW_PKG}" ""

if [ "${EXTERNAL_ONLY_GET}" = "True" ]
   then
       MSG_DISPLAY "Info" "Get only Package : [ ${PKG_RE2C} ] "
   else
       archive_file_extract_tgz "${PWD_DLW_PKG}" "${PKG_RE2C}" "${Pkg_ext_tgz}"
       Base_Compile_OutPut_Redirector="${Prefix_Log_File}_${0}_$(date +%d_%m_%y).log"
       Base_Param_type_PKG="STD"
       Base_Param_PKG_To_Compile="${PKG_RE2C}"
       Base_Param_Compile_Options="--prefix=${BASE_PATH_RE2C}"
       Base_Param_PKG_To_Compile_Option_Path=""
       Base_Param_Make_Options="Dummy"
       Base_Param_Make_Install_Options="Dummy"
       Base_Param_Make_clean="TRUE"
       Base_Param_Post_Compile_Action="COMPILE_Magic_linker"
       Base_Param_PKG_to_link=${Base_Param_PKG_To_Compile}
       Base_INTRA_DIRS="${BASE_PATH_RE2C}"
       COMPILE_Generics_Base_func
fi

############### Stack_TRACE_BUILDER ################
Function_PATH="$( dirname ${Function_PATH} )"
####################################################
}

function PKG_INSTALL_NCURSES                          # PKG_installable_ok
{
############ STACK_TRACE_BUILDER #####################
Function_Name="$0"
Function_PATH="${Function_PATH}/${Function_Name}"
######################################################
MSG_DISPLAY "Debug4" "Current Stack : [ ${Function_PATH} ] "
PKG_INSTALL_CTRL_Sourcing_PKG_CONF
MSG_DISPLAY "Info" "Needed PKG : [ NONE ] "
MSG_DISPLAY "Info" "Installing Package : [ ${PKG_NCURSES} ] "

Internet_Http_Get "${URL_NCURSES}" "${PKG_NCURSES}.${Pkg_ext_tgz}" "${PWD_DLW_PKG}" ""


if [ "${EXTERNAL_ONLY_GET}" = "True" ]
   then
       MSG_DISPLAY "Info" "Get only Package : [ ${PKG_NCURSES} ] "
   else
       archive_file_extract_tgz "${PWD_DLW_PKG}" "${PKG_NCURSES}" "${Pkg_ext_tgz}"
       Base_Compile_OutPut_Redirector="${Prefix_Log_File}_${0}_$(date +%d_%m_%y).log"
       Base_Param_type_PKG="STD"
       Base_Param_PKG_To_Compile="${PKG_NCURSES}"
       Base_Param_Compile_Options="--prefix=${BASE_PATH_NCURSES}  "
       Base_Param_Make_Options="Dummy"
       Base_Param_Make_Install_Options="Dummy"
       Base_Param_Make_clean="TRUE"
       Base_Param_Post_Compile_Action="Dummy"
       COMPILE_Generics_Base_func
fi

############### Stack_TRACE_BUILDER ################
Function_PATH="$( dirname ${Function_PATH} )"
####################################################
}

function PKG_INSTALL_MYSQL                            # PKG_installable_ok
{
############ STACK_TRACE_BUILDER #####################
Function_Name="$0"
Function_PATH="${Function_PATH}/${Function_Name}"
######################################################
MSG_DISPLAY "Debug4" "Current Stack : [ ${Function_PATH} ] "
PKG_INSTALL_CTRL_Sourcing_PKG_CONF
MSG_DISPLAY "Info" "Needed PKG : [ ${PKG_NCURSES} ] "
PKG_INSTALL_NCURSES
MSG_DISPLAY "Info" "Installing Package : [ ${PKG_MYSQL} ] "

Internet_Http_Get "${URL_MYSQL}" "${PKG_MYSQL}.${Pkg_ext_tgz}" "${PWD_DLW_PKG}" ""


if [ "${EXTERNAL_ONLY_GET}" = "True" ]
   then
       MSG_DISPLAY "Info" "Get only Package : [ ${PKG_MYSQL} ] "
   else
       archive_file_extract_tgz "${PWD_DLW_PKG}" "${PKG_MYSQL}" "${Pkg_ext_tgz}"
       Base_Compile_OutPut_Redirector="${Prefix_Log_File}_${0}_$(date +%d_%m_%y).log"
       Base_Param_type_PKG="STD"
       Base_Param_PKG_To_Compile="${PKG_MYSQL}"
       Base_Param_Compile_Options="--prefix=${BASE_PATH_MYSQL} --with-zlib-dir=${BASE_PATH_ZLIB}  --with-openssl=${BASE_PATH_OPENSSL} --enable-thread-safe-client "
       Base_Param_Make_Options="Dummy"
       Base_Param_Make_Install_Options="Dummy"
       Base_Param_Make_clean="TRUE"
       Base_Param_Post_Compile_Action="Dummy"
       COMPILE_Generics_Base_func
fi

############### Stack_TRACE_BUILDER ################
Function_PATH="$( dirname ${Function_PATH} )"
####################################################
}


function PKG_INSTALL_Httpd                            # PKG_installable_ok
{
############ STACK_TRACE_BUILDER #####################
Function_Name="$0"
Function_PATH="${Function_PATH}/${Function_Name}"
######################################################
MSG_DISPLAY "Debug4" "Current Stack : [ ${Function_PATH} ] "
PKG_INSTALL_CTRL_Sourcing_PKG_CONF
MSG_DISPLAY "Info" "Needed PKG : [ NONE ] "
MSG_DISPLAY "Info" "Installing Package : [ ${PKG_HTTPD} ] "

Internet_Http_Get "${URL_HTTPD}" "${PKG_HTTPD}.${Pkg_ext_tgz}" "${PWD_DLW_PKG}" ""

if [ "${EXTERNAL_ONLY_GET}" = "True" ]
   then
       MSG_DISPLAY "Info" "Get only Package : [ ${PKG_HTTPD} ] "
   else
       archive_file_extract_tgz "${PWD_DLW_PKG}" "${PKG_HTTPD}" "${Pkg_ext_tgz}"
       Base_Compile_OutPut_Redirector="${Prefix_Log_File}_${0}_$(date +%d_%m_%y).log"
       Base_Param_type_PKG="STD"
       Base_Param_PKG_To_Compile="${PKG_HTTPD}"
       Base_Param_Compile_Options="--prefix=${BASE_PATH_HTTPD} --enable-ssl --enable-proxy --with-ssl=${BASE_PATH_OPENSSL} --with-z=${BASE_PATH_ZLIB} --enable-so --enable-include --enable-isapi "
       Base_Param_Make_Options="Dummy"
       Base_Param_Make_Install_Options="Dummy"
       Base_Param_Make_clean="TRUE"
       Base_Param_Post_Compile_Action="Dummy"
       COMPILE_Generics_Base_func
fi

############### Stack_TRACE_BUILDER ################
Function_PATH="$( dirname ${Function_PATH} )"
####################################################
}

function PKG_INSTALL_Php                            # PKG_installable_ok
{
############ STACK_TRACE_BUILDER #####################
Function_Name="$0"
Function_PATH="${Function_PATH}/${Function_Name}"
######################################################
MSG_DISPLAY "Debug4" "Current Stack : [ ${Function_PATH} ] "
PKG_INSTALL_CTRL_Sourcing_PKG_CONF
MSG_DISPLAY "Info" "Needed PKG : [ ${PKG_MCRYPT} ] "
PKG_INSTALL_Mcrypt
MSG_DISPLAY "Info" "Needed PKG : [ ${PKG_ZLIB} ] "
PKG_INSTALL_zlib
MSG_DISPLAY "Info" "Needed PKG : [ ${PKG_PNG} ] "
PKG_INSTALL_PNG
MSG_DISPLAY "Info" "Needed PKG : [ ${PKG_GD} ] "
PKG_INSTALL_GD
MSG_DISPLAY "Info" "Needed PKG : [ ${PKG_XSL} ] "
PKG_INSTALL_xsl
MSG_DISPLAY "Info" "Needed PKG : [ ${PKG_XML} ] "
PKG_INSTALL_xml
MSG_DISPLAY "Info" "Needed PKG : [ ${PKG_BERKELEYDB} ] "
PKG_INSTALL_Berkeley_Db
MSG_DISPLAY "Info" "Needed PKG : [ ${PKG_OPENSSL} ] "
PKG_INSTALL_OpenSsl
MSG_DISPLAY "Info" "Needed PKG : [ ${PKG_CURL} ] "
PKG_INSTALL_Curl
MSG_DISPLAY "Info" "Needed PKG : [ ${PKG_LDAP} ] "
install_ldap
MSG_DISPLAY "Info" "Needed PKG : [ ${PKG_HTTPD} ] "
PKG_INSTALL_Httpd
MSG_DISPLAY "Info" "Needed PKG : [ ${PKG_MYSQL} ] "
PKG_INSTALL_MYSQL
MSG_DISPLAY "Info" "Needed PKG : [ ${PKG_FLEX} ] "
PKG_INSTALL_Flex
MSG_DISPLAY "Info" "Needed PKG : [ ${PKG_RE2C} ] "
PKG_INSTALL_Re2c
MSG_DISPLAY "Info" "Installing Package : [ ${PKG_PHP} ] "


Internet_Http_Get "${URL_PHP}" "${PKG_PHP}.${Pkg_ext_tgz}" "${PWD_DLW_PKG}" "/from/this/mirror"

if [ "${EXTERNAL_ONLY_GET}" = "True" ]
   then
       MSG_DISPLAY "Info" "Get only Package : [ ${PKG_PHP} ] "
   else
       archive_file_extract_tgz "${PWD_DLW_PKG}" "${PKG_PHP}" "${Pkg_ext_tgz}"
       Base_Compile_OutPut_Redirector="${Prefix_Log_File}_${0}_$(date +%d_%m_%y).log"
       Base_Param_type_PKG="STD"
       Base_Param_PKG_To_Compile="${PKG_PHP}"
       Base_Param_Compile_Options="--prefix=${BASE_PATH_PHP} --with-config-file-path=${BASE_PATH_PHP}/etc --mandir=${BASE_PATH_PHP}/man --with-apxs2=${BASE_PATH_HTTPD}/bin/apxs --with-mysql=${BASE_PATH_MYSQL} --with-zlib-dir=${BASE_PATH_ZLIB} --with-libxml-dir=${BASE_PATH_XML} --with-xsl=${BASE_PATH_XSL} --with-curl=${BASE_PATH_CURL} --with-gd=${BASE_PATH_GD} --with-db4=${BASE_PATH_BERKELEYDB} --with-mcrypt=${BASE_PATH_MCRYPT} --with-openssl=${BASE_PATH_OPENSSL} --enable-mbstring --enable-libgcc  --with-pear=${BASE_PATH_PHP}/lib/pear --enable-static  --with-gnu-ld "
       Base_Param_Make_Options="Dummy"
       Base_Param_Make_clean="TRUE"
       Base_Param_Post_Compile_Action="Php_Magic"
       COMPILE_Generics_Base_func
fi

############### Stack_TRACE_BUILDER ################
Function_PATH="$( dirname ${Function_PATH} )"
####################################################
}

function PKG_INSTALL_Libart                            # PKG_installable_ok
{
############ STACK_TRACE_BUILDER #####################
Function_Name="$0"
Function_PATH="${Function_PATH}/${Function_Name}"
######################################################
MSG_DISPLAY "Debug4" "Current Stack : [ ${Function_PATH} ] "
PKG_INSTALL_CTRL_Sourcing_PKG_CONF
MSG_DISPLAY "Info" "Needed PKG : [ NONE ] "
MSG_DISPLAY "Info" "Installing Package : [ ${PKG_LIBART} ] "

################# Re2C  ##############################
Internet_Http_Get "${URL_LIBART}" "${PKG_LIBART}.${Pkg_ext_tgz}" "${PWD_DLW_PKG}" ""

if [ "${EXTERNAL_ONLY_GET}" = "True" ]
   then
       MSG_DISPLAY "Info" "Get only Package : [ ${PKG_LIBART} ] "
   else
       archive_file_extract_tgz "${PWD_DLW_PKG}" "${PKG_LIBART}" "${Pkg_ext_tgz}"
       Base_Compile_OutPut_Redirector="${Prefix_Log_File}_${0}_$(date +%d_%m_%y).log"
       Base_Param_type_PKG="STD"
       Base_Param_PKG_To_Compile="${PKG_LIBART}"
       Base_Param_Compile_Options="--prefix=${BASE_PATH_LIBART}"
       Base_Param_PKG_To_Compile_Option_Path=""
       Base_Param_Make_Options="Dummy"
       Base_Param_Make_Install_Options="Dummy"
       Base_Param_Make_clean="TRUE"
       Base_Param_Post_Compile_Action="COMPILE_Magic_linker"
       Base_Param_PKG_to_link=${Base_Param_PKG_To_Compile}
       Base_INTRA_DIRS=`echo ${Base_Param_Compile_Options} | awk -F\-\- '{ print $2 }'  | awk -F\= '{ print $2 }'`
       COMPILE_Generics_Base_func
fi
############### Stack_TRACE_BUILDER ################
Function_PATH="$( dirname ${Function_PATH} )"
####################################################
}


function PKG_INSTALL_custom
{
############ STACK_TRACE_BUILDER #####################
Function_Name="$0"
Function_PATH="${Function_PATH}/${Function_Name}"
######################################################
MSG_DISPLAY "Debug4" "Current Stack : [ ${Function_PATH} ] "
PKG_INSTALL_CTRL_Sourcing_PKG_CONF
MSG_DISPLAY "Info" "Needed PKG : [ None ] "
MSG_DISPLAY "Info" "Installing Package : [ ${PKG_XML} ] "

################## XML   #####################
Internet_Http_Get "${URL_XML}" "${PKG_XML}.${Pkg_ext_tgz}"  "${PWD_DLW_PKG}" ""
if [ "${EXTERNAL_ONLY_GET}" = "True" ]
   then
       MSG_DISPLAY "Info" "Get only Package : [ ${PKG_XML} ] "
   else
       archive_file_extract_tgz "${PWD_DLW_PKG}" "${PKG_XML}" "${Pkg_ext_tgz}"
       Base_Compile_OutPut_Redirector="${Prefix_Log_File}_${0}_$(date +%d_%m_%y).log"
       Base_Param_type_PKG="STD"
       Base_Param_PKG_To_Compile="${PKG_XML}"
       Base_Param_Compile_Options="--prefix=${BASE_PATH_XML}  --with-zlib=${BASE_PATH_ZLIB}"
       Base_Param_PKG_To_Compile_Option_Path=""
       Base_Param_Make_Options="Dummy"
       Base_Param_Make_Install_Options="Dummy"
       Base_Param_Make_clean="TRUE"
       Base_Param_Post_Compile_Action="COMPILE_Magic_linker"
       Base_Param_PKG_to_link=${Base_Param_PKG_To_Compile}
       Base_INTRA_DIRS="${BASE_PATH_XML}"
       COMPILE_Generics_Base_func
fi

############### Stack_TRACE_BUILDER ################
Function_PATH="$( dirname ${Function_PATH} )"
####################################################
}


Sourced_OK="1"
