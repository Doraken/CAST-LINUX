###############################################################################
#  compile.lib                                             Version : 1.1.2.2  #
#                                                                             #
# Creation Date : 19/11/2006                                                  #
# Team          : Only me after all                                           #
# Support mail  : arnaud@crampet.net                                          #
# Author        : Arnaud Crampet                                              #
#                                                                             #
# Subject : This library provide base  compilation functions                  #
#                                                                             #
###############################################################################
####
# INFO

#######################  Functions

function COMPILE_Magic_linker
{
#|# Var to set  :
#|# Base_Param_PKG_to_link  : Use this var to set the package to link to std path
#|# Base_Dir_prefix_install : Use this var to set where to install all pkgs
#|# Base_INTRA_DIRS="${Base_Dir_prefix_install}/${Base_Param_PKG_to_link}"
#|#
#|# Base usage  : COMPILE_Magic_linker
#|#
#|# Description : This function is used to link all binary and libs into the O.S.
#|#
#|# Send Back   : Links
#|#
############ STACK_TRACE_BUILDER #####################
Function_Name="${0}"
Function_PATH="${Function_PATH}/${Function_Name}"
######################################################
MSG_DISPLAY "Debug4" "Current Stack : [ ${Function_PATH} ] "


Linked_OK="${Base_INTRA_DIRS}/LINKED_OK.file"

Directory_Exist "${Base_INTRA_DIRS}"

if [ -e "${Linked_OK}" ]
then
    MSG_DISPLAY "Info" "Package linking for ${Base_Param_PKG_to_link}  : [ ALREADY DONE ] "
else
    MSG_DISPLAY "Info" "Package linking for ${Base_Param_PKG_to_link}  : [ STARTING ] "
for dirs in $(ls ${Base_INTRA_DIRS}/)
   do
      for files in $(ls ${Base_INTRA_DIRS}/${dirs}/)
         do  MSG_DISPLAY "Debug2" " Linking ${Base_INTRA_DIRS}/${dirs}/${files} to /usr/${dirs}/${files}  "
             Generic_Base_Param_MSG="${Debug_Msg}"
      if [ -e "/usr/${dirs}/${files}" ]
         then
             MSG_DISPLAY "Debug2" " File  /usr/${dirs}/${files} : [ ALREADY PRESENT ]  "
         else
            ln -s ${Base_INTRA_DIRS}/${dirs}/${files} /usr/${dirs}/${files}  2>&1 1>> ${FINAL_OUTPUT_REDIRECTOR}
            fi
      done
done
touch ${Linked_OK}
fi

############### Stack_TRACE_BUILDER ################
Function_PATH="$( dirname ${Function_PATH} )"
####################################################
}

########################### Main Functions

function COMPILE_Generics_Base_func
{
#|# Var to set  :
#|# Base_Param_type_PKG                   : Use this var to set type of package  ( Mandatory )
#|# Base_Param_Pkg_Path                   : Use this var to set the file path of the package  ( Mandatory )
#|# Base_Param_PKG_To_Compile             : Use this var to set the package to compile ( Mandatory )
#|# Base_Param_Compile_Options            : Use this var to define Compilation options  ( Mandatory )
#|# Base_Param_Make_Options               : Use this var to set Make Options ( Mandatory )
#|# Base_Param_Post_Compile_Action        : Use This var to defin Post install actions ( Mandatory )
#|# Base_already_Compiled                 : Use this var to defin lock copilation file ( Mandatory )
#|# Base_Param_PKG_To_Compile_Option_Path : use this var to set extra path information ( Mandatory )
#|# Custom_Pkg_Configurator               : use this var to set extra configure case who cannot be standardized ( Mandatory )
#|# Base_Compile_OutPut_Redirector        : Use This var to set if comilation output had to be send to a file ( Mandatory )
#|#
#|# Base usage  : Set all Mandatory vars and launch " COMPILE_Generics_Base_func"
#|#
#|# Description : This function is used to compile generic source tarball for linux env
#|#
#|# Send Back   : Compiled packages
############ STACK_TRACE_BUILDER #####################
Function_Name="${0}"
Function_PATH="${Function_PATH}/${Function_Name}"
######################################################
MSG_DISPLAY "Debug4" "Current Stack : [ ${Function_PATH} ] "

Execution_Output_redirector ${Base_Compile_OutPut_Redirector}

Base_already_Compiled="Compiled_OK"
Directory_Exist "${Base_Param_Pkg_Path}/${Base_Param_PKG_To_Compile}"

if [ -e "${Base_Param_Pkg_Path}/${Base_Param_PKG_To_Compile}/${Base_already_Compiled}" ]
    then
         MSG_DISPLAY "Info" "Package compilation for ${Base_Param_PKG_To_Compile}  : [ Already DONE ] "
    else
        MSG_DISPLAY "Info" "Package compilation for ${Base_Param_PKG_To_Compile}  : [ STARTING ] "
        MSG_DISPLAY "Debug6" "Path for Package ${Base_Param_PKG_To_Compile}  : [ ${Base_Param_Pkg_Path}/${Base_Param_PKG_To_Compile}/${Base_Param_PKG_To_Compile_Option_Path} ] "
        cd ${Base_Param_Pkg_Path}/${Base_Param_PKG_To_Compile}/${Base_Param_PKG_To_Compile_Option_Path}
        case ${Base_Param_type_PKG} in
             STD) if [ -e "${Base_Param_Pkg_Path}/${Base_Param_PKG_To_Compile}/configure" ]
                    then
                       Base_Configurator="./configure "
                    else
                       if [ -e "${Base_Param_Pkg_Path}/${Base_Param_PKG_To_Compile}/Configure" ]
                          then
                           Base_Configurator="./Configure "
                           MSG_DISPLAY "Debug6" "Configurator is set to : [ ${Base_Configurator} ] "
                          else
                           MSG_DISPLAY "ErrorN" "Missing configurator : [ ERROR ]" "2"
                       fi
                   fi
                   ;;
            PERL) Base_Configurator="${EXE_PERL}"
                  MSG_DISPLAY "Debug6" "Configurator is set to : [ ${Base_Configurator} ] "
                  ;;
          CUSTOM) Base_Configurator="${Custom_Pkg_Configurator}"
                  MSG_DISPLAY "Debug6" "Configurator is set to : [ ${Custom_Pkg_Configurator} ] "
                  ;;
               *) MSG_DISPLAY "ErrorN" "Can t use this configurator ${Base_Param_type_PKG} : [ ERROR ]" "2"
                  ;;
        esac

        Generic_Base_Param_MSG="Configuration of Package ${Base_Param_PKG_To_Compile} "
        MSG_DISPLAY "Debug2" " configuration commande  : [ ${Base_Configurator} ${Base_Param_Compile_Options} ] "

        ${Base_Configurator} ${Base_Param_Compile_Options}  2>&1 1>> ${FINAL_OUTPUT_REDIRECTOR}
        CTRL_Result_func "${?}" "Check Result of Configure for [ ${Base_Param_PKG_To_Compile} ] " "" "1"

        Spacer_MSG
        Interleave_MSG
        Spacer_MSG

        COMPILE_Make_Package_SUB

        Spacer_MSG
        Interleave_MSG
        Spacer_MSG

        COMPILE_Make_install_SUB

        Spacer_MSG
        Interleave_MSG
        Spacer_MSG

        COMPILE_Make_Clean_SUB

        Spacer_MSG
        Interleave_MSG
        Spacer_MSG

        COMPILE_Post_Compile_Action_SUB
        Interleave_MSG
        Spacer_MSG

        touch ${Base_Param_Pkg_Path}/${Base_Param_PKG_To_Compile}/${Base_already_Compiled}
        cd ${Return_Path}
        MSG_DISPLAY "Info" "Package compilation for ${Base_Param_PKG_To_Compile}  : [ DONE ] "
        Base_Param_PKG_To_Compile=""
        Base_Param_PKG_To_Compile_Option_Path=""
        Custom_Pkg_Configurator=""

fi
Execution_Output_redirector "${My_PTS}"
############### Stack_TRACE_BUILDER ################
Function_PATH="$( dirname ${Function_PATH} )"
####################################################
}

############################## Packages functions ##############################

function PKG_INSTALL_POSTFIX        # PKG_installable_ok
{
#|# Var to set  : None
#|#
#|# Base usage  : PKG_INSTALL_POSTFIX
#|#
#|# Description : This function is used to launche POSTFIX compile
#|#
#|# Send Back   : Package compilation
#|#
############ STACK_TRACE_BUILDER #####################
Function_Name="$0"
Function_PATH="${Function_PATH}/${Function_Name}"
######################################################
MSG_DISPLAY "Debug4" "Current Stack : [ ${Function_PATH} ] "
PKG_INSTALL_CTRL_Sourcing_PKG_CONF

MSG_DISPLAY "Info" "Needed PKG : [ ${PKG_CVS} ] "
PKG_INSTALL_CVS


MSG_DISPLAY "Info" "Installing Package : [ ${PKG_POSTFIX} ] "

INTERNAL_ONLY_GET="${1}"

Redo_Last="Dummy"
################ POSTFIX ###########################
Internet_Http_Get "${URL_POSTFIX}" "${PKG_POSTFIX}.${Pkg_ext_tgz}" "${PWD_DLW_PKG}" ""
if [ "${EXTERNAL_ONLY_GET}" = "True" ]
   then
       MSG_DISPLAY "Info" "Get only Package : [ ${URL_POSTFIX} ] "
   else
       archive_file_extract_tgz "${PWD_DLW_PKG}" "${PKG_POSTFIX}" "${Pkg_ext_tgz}"
       Base_Compile_OutPut_Redirector="${Prefix_Log_File}_${0}_$(date +%d_%m_%y).log"
       Base_Param_type_PKG="STD"
       Base_Param_PKG_To_Compile="${PKG_POSTFIX}"
       Base_Param_Compile_Options="--prefix=${BASE_PATH_POSTFIX} --with-cvs=${BASE_PATH_CVS}/bin/cvs --with-perl=/usr/bin/perl"
       Base_Param_PKG_To_Compile_Option_Path=""
       Custom_Pkg_Configurator=""
       Base_Param_Make_Options="Dummy"
       Base_Param_Make_Install_Options="Dummy"
       Base_Param_Make_clean="TRUE"
       Base_Param_Post_Compile_Action="COMPILE_Magic_linker"
       Base_Param_PKG_to_link=${Base_Param_PKG_To_Compile}
       Base_INTRA_DIRS="${BASE_PATH_POSTFIX}"
       COMPILE_Generics_Base_func
fi
############### Stack_TRACE_BUILDER ################
Function_PATH="$( dirname ${Function_PATH} )"
####################################################
}


function PKG_INSTALL_CVSD        # PKG_installable_ok
{
#|# Var to set  : None
#|#
#|# Base usage  : PKG_INSTALL_CVSD
#|#
#|# Description : This function is used to launche CVSD compile
#|#
#|# Send Back   : Package compilation
#|#
############ STACK_TRACE_BUILDER #####################
Function_Name="$0"
Function_PATH="${Function_PATH}/${Function_Name}"
######################################################
MSG_DISPLAY "Debug4" "Current Stack : [ ${Function_PATH} ] "
PKG_INSTALL_CTRL_Sourcing_PKG_CONF

MSG_DISPLAY "Info" "Needed PKG : [ ${PKG_CVS} ] "
PKG_INSTALL_CVS


MSG_DISPLAY "Info" "Installing Package : [ ${PKG_CVSD} ] "

INTERNAL_ONLY_GET="${1}"

Redo_Last="Dummy"
################ CVSD ###########################
Internet_Http_Get "${URL_CVSD}" "${PKG_CVSD}.${Pkg_ext_tgz}" "${PWD_DLW_PKG}" ""
if [ "${EXTERNAL_ONLY_GET}" = "True" ]
   then
       MSG_DISPLAY "Info" "Get only Package : [ ${URL_CVSD} ] "
   else
       archive_file_extract_tgz "${PWD_DLW_PKG}" "${PKG_CVSD}" "${Pkg_ext_tgz}"
       Base_Compile_OutPut_Redirector="${Prefix_Log_File}_${0}_$(date +%d_%m_%y).log"
       Base_Param_type_PKG="STD"
       Base_Param_PKG_To_Compile="${PKG_CVSD}"
       Base_Param_Compile_Options="--prefix=${BASE_PATH_CVSD} --with-cvs=${BASE_PATH_CVS}/bin/cvs --with-perl=/usr/bin/perl"
       Base_Param_PKG_To_Compile_Option_Path=""
       Custom_Pkg_Configurator=""
       Base_Param_Make_Options="Dummy"
       Base_Param_Make_Install_Options="Dummy"
       Base_Param_Make_clean="TRUE"
       Base_Param_Post_Compile_Action="COMPILE_Magic_linker"
       Base_Param_PKG_to_link=${Base_Param_PKG_To_Compile}
       Base_INTRA_DIRS="${BASE_PATH_CVSD}"
       COMPILE_Generics_Base_func
fi
############### Stack_TRACE_BUILDER ################
Function_PATH="$( dirname ${Function_PATH} )"
####################################################
}


function PKG_INSTALL_RSYNC        # PKG_installable_ok
{
#|# Var to set  : None
#|#
#|# Base usage  : PKG_INSTALL_RSYNC
#|#
#|# Description : This function is used to launche RSYNC compile
#|#
#|# Send Back   : Package compilation
#|#
############ STACK_TRACE_BUILDER #####################
Function_Name="$0"
Function_PATH="${Function_PATH}/${Function_Name}"
######################################################
MSG_DISPLAY "Debug4" "Current Stack : [ ${Function_PATH} ] "
PKG_INSTALL_CTRL_Sourcing_PKG_CONF

MSG_DISPLAY "Info" "Needed PKG : [ ${PKG_LIBICONV} ] "
PKG_INSTALL_LIBICONV
MSG_DISPLAY "Info" "Needed PKG : [ ${PKG_OPENSSL} ] "
PKG_INSTALL_OpenSsl


MSG_DISPLAY "Info" "Installing Package : [ ${PKG_RSYNC} ] "

INTERNAL_ONLY_GET="${1}"

Redo_Last="Dummy"
################ RSYNC ###########################
Internet_Http_Get "${URL_RSYNC}" "${PKG_RSYNC}.${Pkg_ext_tgz}" "${PWD_DLW_PKG}" ""
if [ "${EXTERNAL_ONLY_GET}" = "True" ]
   then
       MSG_DISPLAY "Info" "Get only Package : [ ${URL_RSYNC} ] "
   else
       archive_file_extract_tgz "${PWD_DLW_PKG}" "${PKG_RSYNC}" "${Pkg_ext_tgz}"
       Base_Compile_OutPut_Redirector="${Prefix_Log_File}_${0}_$(date +%d_%m_%y).log"
       Base_Param_type_PKG="STD"
       Base_Param_PKG_To_Compile="${PKG_RSYNC}"
       Base_Param_Compile_Options="--prefix=${BASE_PATH_RSYNC}  --with-libiconv=${BASE_PATH_LIBICONV} --disable-ipv6 "
       Base_Param_PKG_To_Compile_Option_Path=""
       Custom_Pkg_Configurator=""
       Base_Param_Make_Options="Dummy"
       Base_Param_Make_Install_Options="Dummy"
       Base_Param_Make_clean="TRUE"
       Base_Param_Post_Compile_Action="COMPILE_Magic_linker"
       Base_Param_PKG_to_link=${Base_Param_PKG_To_Compile}
       Base_INTRA_DIRS="${BASE_PATH_RSYNC}"
       COMPILE_Generics_Base_func
fi
############### Stack_TRACE_BUILDER ################
Function_PATH="$( dirname ${Function_PATH} )"
####################################################
}

function PKG_INSTALL_TOMCAT        # PKG_installable_ok
{
#|# Var to set  : None
#|#
#|# Base usage  : PKG_INSTALL_TOMCAT
#|#
#|# Description : This function is used to launche TOMCAT compile
#|#
#|# Send Back   : Package compilation
#|#
############ STACK_TRACE_BUILDER #####################
Function_Name="$0"
Function_PATH="${Function_PATH}/${Function_Name}"
######################################################
MSG_DISPLAY "Debug4" "Current Stack : [ ${Function_PATH} ] "
PKG_INSTALL_CTRL_Sourcing_PKG_CONF

MSG_DISPLAY "Info" "Installing Package : [ ${PKG_TOMCAT} ] "

INTERNAL_ONLY_GET="${1}"

Redo_Last="Dummy"
################ TOMCAT ###########################
Internet_Http_Get "${URL_TOMCAT}" "${PKG_TOMCAT}.${Pkg_ext_tgz}" "${PWD_DLW_PKG}" ""
if [ "${EXTERNAL_ONLY_GET}" = "True" ]
   then
       MSG_DISPLAY "Info" "Get only Package : [ ${URL_TOMCAT} ] "
   else
       archive_file_extract_tgz "${PWD_DLW_PKG}" "${PKG_TOMCAT}" "${Pkg_ext_tgz}"
       Base_Compile_OutPut_Redirector="${Prefix_Log_File}_${0}_$(date +%d_%m_%y).log"
       Base_Param_type_PKG="STD"
       Base_Param_PKG_To_Compile="${PKG_TOMCAT}"
       Base_Param_Compile_Options="--prefix=${BASE_PATH_v} --disable-ipv6 "
       Base_Param_PKG_To_Compile_Option_Path=""
       Custom_Pkg_Configurator=""
       Base_Param_Make_Options="Dummy"
       Base_Param_Make_Install_Options="Dummy"
       Base_Param_Make_clean="TRUE"
       Base_Param_Post_Compile_Action="COMPILE_Magic_linker"
       Base_Param_PKG_to_link=${Base_Param_PKG_To_Compile}
       Base_INTRA_DIRS="${BASE_PATH_TOMCAT}"
       COMPILE_Generics_Base_func
fi
############### Stack_TRACE_BUILDER ################
Function_PATH="$( dirname ${Function_PATH} )"
####################################################
}


function PKG_INSTALL_AMAVISD        # PKG_installable_Nok
{
#|# Var to set  : None
#|#
#|# Base usage  : PKG_INSTALL_AMAVISD
#|#
#|# Description : This function is used to launche AMAVISD compile
#|#
#|# Send Back   : Package compilation
#|#
############ STACK_TRACE_BUILDER #####################
Function_Name="$0"
Function_PATH="${Function_PATH}/${Function_Name}"
######################################################
MSG_DISPLAY "Debug4" "Current Stack : [ ${Function_PATH} ] "
PKG_INSTALL_CTRL_Sourcing_PKG_CONF

MSG_DISPLAY "Info" "Needed PKG : [ ${PKG_ZLIB} ] "
PKG_INSTALL_zlib
MSG_DISPLAY "Info" "Needed PKG : [ ${PKG_BerkeleyDb} ] "
PKG_INSTALL_Berkeley_Db


MSG_DISPLAY "Info" "Needed PKG : [ ${PKG_LIBICONV} ] "
PKG_INSTALL_LIBICONV
MSG_DISPLAY "Info" "Needed PKG : [ ${PKG_OPENSSL} ] "
PKG_INSTALL_OpenSsl

MSG_DISPLAY "Info" "Installing Package : [ ${PKG_AMAVISD} ] "

INTERNAL_ONLY_GET="${1}"

Redo_Last="Dummy"
################ AMAVISD ###########################
Internet_Http_Get "${URL_AMAVISD}" "${PKG_AMAVISD}.${Pkg_ext_tgz}" "${PWD_DLW_PKG}" ""
if [ "${EXTERNAL_ONLY_GET}" = "True" ]
   then
       MSG_DISPLAY "Info" "Get only Package : [ ${URL_AMAVISD} ] "
   else
       archive_file_extract_tgz "${PWD_DLW_PKG}" "${PKG_AMAVISD}" "${Pkg_ext_tgz}"
       Base_Compile_OutPut_Redirector="${Prefix_Log_File}_${0}_$(date +%d_%m_%y).log"
       Base_Param_type_PKG="STD"
       Base_Param_PKG_To_Compile="${PKG_AMAVISD}"
       Base_Param_Compile_Options="--prefix=${BASE_PATH_AMAVISD}  --enable-threads --with-openssl=${BASE_PATH_OPENSSL} --with-libiconv=${BASE_PATH_LIBICONV} "
       Base_Param_PKG_To_Compile_Option_Path=""
       Custom_Pkg_Configurator=""
       Base_Param_Make_Options="Dummy"
       Base_Param_Make_Install_Options="Dummy"
       Base_Param_Make_clean="TRUE"
       Base_Param_Post_Compile_Action="COMPILE_Magic_linker"
       Base_Param_PKG_to_link=${Base_Param_PKG_To_Compile}
       Base_INTRA_DIRS="${BASE_PATH_AMAVISD}"
       COMPILE_Generics_Base_func
fi
############### Stack_TRACE_BUILDER ################
Function_PATH="$( dirname ${Function_PATH} )"
####################################################
}




function PKG_INSTALL_BIND        # PKG_installable_ok
{
#|# Var to set  : None
#|#
#|# Base usage  : PKG_INSTALL_BIND
#|#
#|# Description : This function is used to launche BIND compile
#|#
#|# Send Back   : Package compilation
#|#
############ STACK_TRACE_BUILDER #####################
Function_Name="$0"
Function_PATH="${Function_PATH}/${Function_Name}"
######################################################
MSG_DISPLAY "Debug4" "Current Stack : [ ${Function_PATH} ] "
PKG_INSTALL_CTRL_Sourcing_PKG_CONF

MSG_DISPLAY "Info" "Needed PKG : [ ${PKG_LIBICONV} ] "
PKG_INSTALL_LIBICONV
MSG_DISPLAY "Info" "Needed PKG : [ ${PKG_OPENSSL} ] "
PKG_INSTALL_OpenSsl

MSG_DISPLAY "Info" "Installing Package : [ ${PKG_BIND} ] "

INTERNAL_ONLY_GET="${1}"

Redo_Last="Dummy"
################ BIND ###########################
Internet_Http_Get "${URL_BIND}" "${PKG_BIND}.${Pkg_ext_tgz}" "${PWD_DLW_PKG}" ""
if [ "${EXTERNAL_ONLY_GET}" = "True" ]
   then
       MSG_DISPLAY "Info" "Get only Package : [ ${URL_BIND} ] "
   else
       archive_file_extract_tgz "${PWD_DLW_PKG}" "${PKG_BIND}" "${Pkg_ext_tgz}"
       Base_Compile_OutPut_Redirector="${Prefix_Log_File}_${0}_$(date +%d_%m_%y).log"
       Base_Param_type_PKG="STD"
       Base_Param_PKG_To_Compile="${PKG_BIND}"
       Base_Param_Compile_Options="--prefix=${BASE_PATH_BIND}  --enable-threads --with-openssl=${BASE_PATH_OPENSSL} --with-libiconv=${BASE_PATH_LIBICONV} "
       Base_Param_PKG_To_Compile_Option_Path=""
       Custom_Pkg_Configurator=""
       Base_Param_Make_Options="Dummy"
       Base_Param_Make_Install_Options="Dummy"
       Base_Param_Make_clean="TRUE"
       Base_Param_Post_Compile_Action="COMPILE_Magic_linker"
       Base_Param_PKG_to_link=${Base_Param_PKG_To_Compile}
       Base_INTRA_DIRS="${BASE_PATH_BIND}"
       COMPILE_Generics_Base_func
fi
############### Stack_TRACE_BUILDER ################
Function_PATH="$( dirname ${Function_PATH} )"
####################################################
}

function PKG_INSTALL_LIBICONV        # PKG_installable_ok
{
#|# Var to set  : None
#|#
#|# Base usage  : PKG_INSTALL_LIBICONV
#|#
#|# Description : This function is used to launche LIBICONV compile
#|#
#|# Send Back   : Package compilation
#|#
############ STACK_TRACE_BUILDER #####################
Function_Name="$0"
Function_PATH="${Function_PATH}/${Function_Name}"
######################################################
MSG_DISPLAY "Debug4" "Current Stack : [ ${Function_PATH} ] "
PKG_INSTALL_CTRL_Sourcing_PKG_CONF

MSG_DISPLAY "Info" "Installing Package : [ ${PKG_LIBICONV} ] "

INTERNAL_ONLY_GET="${1}"

Redo_Last="Dummy"
################ LIBICONV ###########################
Internet_Http_Get "${URL_LIBICONV}" "${PKG_LIBICONV}.${Pkg_ext_tgz}" "${PWD_DLW_PKG}" ""
if [ "${EXTERNAL_ONLY_GET}" = "True" ]
   then
       MSG_DISPLAY "Info" "Get only Package : [ ${URL_LIBICONV} ] "
   else
       archive_file_extract_tgz "${PWD_DLW_PKG}" "${PKG_LIBICONV}" "${Pkg_ext_tgz}"
       Base_Compile_OutPut_Redirector="${Prefix_Log_File}_${0}_$(date +%d_%m_%y).log"
       Base_Param_type_PKG="STD"
       Base_Param_PKG_To_Compile="${PKG_LIBICONV}"
       Base_Param_Compile_Options="--prefix=${BASE_PATH_LIBICONV}"
       Base_Param_PKG_To_Compile_Option_Path=""
       Custom_Pkg_Configurator=""
       Base_Param_Make_Options="Dummy"
       Base_Param_Make_Install_Options="Dummy"
       Base_Param_Make_clean="TRUE"
       Base_Param_Post_Compile_Action="COMPILE_Magic_linker"
       Base_Param_PKG_to_link=${Base_Param_PKG_To_Compile}
       Base_INTRA_DIRS="${BASE_PATH_LIBICONV}"
       COMPILE_Generics_Base_func
fi
############### Stack_TRACE_BUILDER ################
Function_PATH="$( dirname ${Function_PATH} )"
####################################################
}

function PKG_INSTALL_NETSNMP        # PKG_installable_ok
{
#|# Var to set  : None
#|#
#|# Base usage  : PKG_INSTALL_NETSNMP
#|#
#|# Description : This function is used to launche NETSNMP compile
#|#
#|# Send Back   : Package compilation
#|#
############ STACK_TRACE_BUILDER #####################
Function_Name="$0"
Function_PATH="${Function_PATH}/${Function_Name}"
######################################################
MSG_DISPLAY "Debug4" "Current Stack : [ ${Function_PATH} ] "
PKG_INSTALL_CTRL_Sourcing_PKG_CONF

MSG_DISPLAY "Info" "Installing Package : [ ${PKG_NETSNMP} ] "

INTERNAL_ONLY_GET="${1}"

Redo_Last="Dummy"
################ NETSNMP ###########################
Internet_Http_Get "${URL_NETSNMP}" "${PKG_NETSNMP}.${Pkg_ext_tgz}" "${PWD_DLW_PKG}" ""
if [ "${EXTERNAL_ONLY_GET}" = "True" ]
   then
       MSG_DISPLAY "Info" "Get only Package : [ ${URL_NETSNMP} ] "
   else
       archive_file_extract_tgz "${PWD_DLW_PKG}" "${PKG_NETSNMP}" "${Pkg_ext_tgz}"
       Base_Compile_OutPut_Redirector="${Prefix_Log_File}_${0}_$(date +%d_%m_%y).log"
       Base_Param_type_PKG="STD"
       Base_Param_PKG_To_Compile="${PKG_NETSNMP}"
       Base_Param_Compile_Options="--prefix=${BASE_PATH_NETSNMP}"
       Base_Param_PKG_To_Compile_Option_Path=""
       Custom_Pkg_Configurator=""
       Base_Param_Make_Options="Dummy"
       Base_Param_Make_Install_Options="Dummy"
       Base_Param_Make_clean="TRUE"
       Base_Param_Post_Compile_Action="COMPILE_Magic_linker"
       Base_Param_PKG_to_link=${Base_Param_PKG_To_Compile}
       Base_INTRA_DIRS="${BASE_PATH_NETSNMP}"
       COMPILE_Generics_Base_func
fi
############### Stack_TRACE_BUILDER ################
Function_PATH="$( dirname ${Function_PATH} )"
####################################################
}

function PKG_INSTALL_CVS        # PKG_installable_ok
{
#|# Var to set  : None
#|#
#|# Base usage  : PKG_INSTALL_CVS
#|#
#|# Description : This function is used to launche CVS compile
#|#
#|# Send Back   : Package compilation
#|#
############ STACK_TRACE_BUILDER #####################
Function_Name="$0"
Function_PATH="${Function_PATH}/${Function_Name}"
######################################################
MSG_DISPLAY "Debug4" "Current Stack : [ ${Function_PATH} ] "
PKG_INSTALL_CTRL_Sourcing_PKG_CONF

MSG_DISPLAY "Info" "Installing Package : [ ${PKG_CVS} ] "

INTERNAL_ONLY_GET="${1}"

Redo_Last="Dummy"
################ CVS ###########################
Internet_Http_Get "${URL_CVS}" "${PKG_CVS}.${Pkg_ext_tgz}" "${PWD_DLW_PKG}" ""
if [ "${EXTERNAL_ONLY_GET}" = "True" ]
   then
       MSG_DISPLAY "Info" "Get only Package : [ ${URL_CVS} ] "
   else
       archive_file_extract_tgz "${PWD_DLW_PKG}" "${PKG_CVS}" "${Pkg_ext_tgz}"
       Base_Compile_OutPut_Redirector="${Prefix_Log_File}_${0}_$(date +%d_%m_%y).log"
       Base_Param_type_PKG="STD"
       Base_Param_PKG_To_Compile="${PKG_CVS}"
       Base_Param_Compile_Options="--prefix=${BASE_PATH_CVS}"
       Base_Param_PKG_To_Compile_Option_Path=""
       Custom_Pkg_Configurator=""
       Base_Param_Make_Options="Dummy"
       Base_Param_Make_Install_Options="Dummy"
       Base_Param_Make_clean="TRUE"
       Base_Param_Post_Compile_Action="COMPILE_Magic_linker"
       Base_Param_PKG_to_link=${Base_Param_PKG_To_Compile}
       Base_INTRA_DIRS="${BASE_PATH_CVS}"
       COMPILE_Generics_Base_func
fi
############### Stack_TRACE_BUILDER ################
Function_PATH="$( dirname ${Function_PATH} )"
####################################################
}

function PKG_INSTALL_FREETYPE2        # PKG_installable_ok
{
#|# Var to set  : None
#|#
#|# Base usage  : PKG_INSTALL_FREETYPE2
#|#
#|# Description : This function is used to launche FREETYPE2 compile
#|#
#|# Send Back   : Package compilation
#|#
############ STACK_TRACE_BUILDER #####################
Function_Name="$0"
Function_PATH="${Function_PATH}/${Function_Name}"
######################################################
MSG_DISPLAY "Debug4" "Current Stack : [ ${Function_PATH} ] "
PKG_INSTALL_CTRL_Sourcing_PKG_CONF

MSG_DISPLAY "Info" "Installing Package : [ ${PKG_FREETYPE2} ] "

INTERNAL_ONLY_GET="${1}"

Redo_Last="Dummy"
################ FREETYPE2 ###########################
Internet_Http_Get "${URL_FREETYPE2}" "${PKG_FREETYPE2}.${Pkg_ext_tgz}" "${PWD_DLW_PKG}" ""
if [ "${EXTERNAL_ONLY_GET}" = "True" ]
   then
       MSG_DISPLAY "Info" "Get only Package : [ ${URL_FREETYPE2} ] "
   else
       archive_file_extract_tgz "${PWD_DLW_PKG}" "${PKG_FREETYPE2}" "${Pkg_ext_tgz}"
       Base_Compile_OutPut_Redirector="${Prefix_Log_File}_${0}_$(date +%d_%m_%y).log"
       Base_Param_type_PKG="STD"
       Base_Param_PKG_To_Compile="${PKG_FREETYPE2}"
       Base_Param_Compile_Options="--prefix=${BASE_PATH_FREETYPE2}"
       Base_Param_PKG_To_Compile_Option_Path=""
       Custom_Pkg_Configurator=""
       Base_Param_Make_Options="Dummy"
       Base_Param_Make_Install_Options="Dummy"
       Base_Param_Make_clean="TRUE"
       Base_Param_Post_Compile_Action="COMPILE_Magic_linker"
       Base_Param_PKG_to_link=${Base_Param_PKG_To_Compile}
       Base_INTRA_DIRS="${BASE_PATH_FREETYPE2}"
       COMPILE_Generics_Base_func
fi
############### Stack_TRACE_BUILDER ################
Function_PATH="$( dirname ${Function_PATH} )"
####################################################
}

function PKG_INSTALL_RRDTOOLS        # PKG_installable_ok
{
#|# Var to set  : None
#|#
#|# Base usage  : PKG_INSTALL_RRDTOOLS
#|#
#|# Description : This function is used to launche RRDTOOLS compile
#|#
#|# Send Back   : Package compilation
#|#
############ STACK_TRACE_BUILDER #####################
Function_Name="$0"
Function_PATH="${Function_PATH}/${Function_Name}"
######################################################
MSG_DISPLAY "Debug4" "Current Stack : [ ${Function_PATH} ] "
PKG_INSTALL_CTRL_Sourcing_PKG_CONF
MSG_DISPLAY "Info" "Needed PKG : [ ${PKG_LIBART} ] "
PKG_INSTALL_Libart
MSG_DISPLAY "Info" "Needed PKG : [ ${PKG_FREETYPE2} ] "
PKG_INSTALL_FREETYPE2
MSG_DISPLAY "Info" "Needed PKG : [ ${PKG_TCL} ] "
PKG_INSTALL_TCL
MSG_DISPLAY "Info" "Installing Package : [ ${PKG_RRDTOOLS} ] "

INTERNAL_ONLY_GET="${1}"

Redo_Last="Dummy"
################ RRDTOOLS ###########################
Internet_Http_Get "${URL_RRDTOOLS}" "${PKG_RRDTOOLS}.${Pkg_ext_tgz}" "${PWD_DLW_PKG}" ""
if [ "${EXTERNAL_ONLY_GET}" = "True" ]
   then
       MSG_DISPLAY "Info" "Get only Package : [ ${URL_RRDTOOLS} ] "
   else
       archive_file_extract_tgz "${PWD_DLW_PKG}" "${PKG_RRDTOOLS}" "${Pkg_ext_tgz}"
       Base_Compile_OutPut_Redirector="${Prefix_Log_File}_${0}_$(date +%d_%m_%y).log"
       Base_Param_type_PKG="STD"
       Base_Param_PKG_To_Compile="${PKG_RRDTOOLS}"
       Base_Param_Compile_Options="--prefix=${BASE_PATH_RRDTOOLS}"
       Base_Param_PKG_To_Compile_Option_Path=""
       Custom_Pkg_Configurator=""
       Base_Param_Make_Options="Dummy"
       Base_Param_Make_Install_Options="Dummy"
       Base_Param_Make_clean="TRUE"
       Base_Param_Post_Compile_Action="COMPILE_Magic_linker"
       Base_Param_PKG_to_link=${Base_Param_PKG_To_Compile}
       Base_INTRA_DIRS="${BASE_PATH_RRDTOOLS}"
       COMPILE_Generics_Base_func
fi
############### Stack_TRACE_BUILDER ################
Function_PATH="$( dirname ${Function_PATH} )"
####################################################
}



function PKG_INSTALL_Berkeley_Db        # PKG_installable_ok
{
#|# Var to set  : None
#|#
#|# Base usage  : PKG_INSTALL_Berkeley_Db
#|#
#|# Description : This function is used to launche BERKELEY DB compile
#|#
#|# Send Back   : Package compilation
#|#
############ STACK_TRACE_BUILDER #####################
Function_Name="$0"
Function_PATH="${Function_PATH}/${Function_Name}"
######################################################
MSG_DISPLAY "Debug4" "Current Stack : [ ${Function_PATH} ] "
PKG_INSTALL_CTRL_Sourcing_PKG_CONF
MSG_DISPLAY "Info" "Installing Package : [ ${PKG_BerkeleyDb} ] "

INTERNAL_ONLY_GET="${1}"

Redo_Last="Dummy"
################ BerkeleyDB ###########################
Internet_Http_Get "${URL_BerkeleyDb}" "${PKG_BerkeleyDb}.${Pkg_ext_tgz}" "${PWD_DLW_PKG}" ""
if [ "${EXTERNAL_ONLY_GET}" = "True" ]
   then
       MSG_DISPLAY "Info" "Get only Package : [ ${URL_BerkeleyDb} ] "
   else
       archive_file_extract_tgz "${PWD_DLW_PKG}" "${PKG_BerkeleyDb}" "${Pkg_ext_tgz}"
       Base_Compile_OutPut_Redirector="${Prefix_Log_File}_${0}_$(date +%d_%m_%y).log"
       Base_Param_type_PKG="CUSTOM"
       Base_Param_PKG_To_Compile="${PKG_BerkeleyDb}"
       Base_Param_Compile_Options="--prefix=${BASE_PATH_BERKELEYDB}"
       Base_Param_PKG_To_Compile_Option_Path="build_unix"
       Custom_Pkg_Configurator="../dist/configure"
       Base_Param_Make_Options="Dummy"
       Base_Param_Make_Install_Options="Dummy"
       Base_Param_Make_clean="TRUE"
       Base_Param_Post_Compile_Action="COMPILE_Magic_linker"
       Base_Param_PKG_to_link=${Base_Param_PKG_To_Compile}
       Base_INTRA_DIRS="${BASE_PATH_BERKELEYDB}"
       COMPILE_Generics_Base_func
fi
############### Stack_TRACE_BUILDER ################
Function_PATH="$( dirname ${Function_PATH} )"
####################################################
}

function PKG_INSTALL_OpenLdap         # PKG_installable_ok
{
#|# Var to set  : None
#|#
#|# Base usage  : PKG_INSTALL_OpenLdap
#|#
#|# Description : This function is used to launche OPENLDAP compile
#|#
#|# Send Back   : Package compilation
#|#
############ STACK_TRACE_BUILDER #####################
Function_Name="$0"
Function_PATH="${Function_PATH}/${Function_Name}"
######################################################
MSG_DISPLAY "Debug4" "Current Stack : [ ${Function_PATH} ] "
PKG_INSTALL_CTRL_Sourcing_PKG_CONF
MSG_DISPLAY "Info" "Needed PKG : [ ${PKG_BerkeleyDb} ] "
PKG_INSTALL_Berkeley_Db

MSG_DISPLAY "Info" "Installing Package : [ ${PKG_OPEN_LDAP} ] "

Internet_Http_Get "${URL_OPEN_LDAP}" "openldap-stable-20060823.${Pkg_ext_tgz2}" "${PWD_DLW_PKG}" ""
cp ${PWD_DLW_PKG}/openldap-stable-20060823.${Pkg_ext_tgz2} ${PWD_DLW_PKG}/${PKG_OPEN_LDAP}.${Pkg_ext_tgz}



if [ "${EXTERNAL_ONLY_GET}" = "True" ]
   then
       MSG_DISPLAY "Info" "Get only Package : [ ${PKG_OPEN_LDAP} ] "
   else
       archive_file_extract_tgz "${PWD_DLW_PKG}" "${PKG_OPEN_LDAP}" "${Pkg_ext_tgz}"
       Base_Compile_OutPut_Redirector="${Prefix_Log_File}_${0}_$(date +%d_%m_%y).log"
       Base_Param_type_PKG="STD"
       Base_Param_PKG_To_Compile="${PKG_OPEN_LDAP}"
       Base_Param_Compile_Options="--prefix=${BASE_PATH_OPENLDAP}"
       Base_Param_PKG_To_Compile_Option_Path=""
       Base_Param_Make_Options="Dummy"
       Base_Param_Make_Install_Options="Dummy"
       Base_Param_Make_clean="TRUE"
       Base_Param_Post_Compile_Action="COMPILE_Magic_linker"
       Base_Param_PKG_to_link=${Base_Param_PKG_To_Compile}
       Base_INTRA_DIRS="${BASE_PATH_OPENLDAP}"
       COMPILE_Generics_Base_func
fi

############### Stack_TRACE_BUILDER ################
Function_PATH="$( dirname ${Function_PATH} )"
####################################################
}


function PKG_INSTALL_TCL         # PKG_installable_ok
{
#|# Var to set  : None
#|#
#|# Base usage  : PKG_INSTALL_TCL
#|#
#|# Description : This function is used to launche TCL compile
#|#
#|# Send Back   : Package compilation
#|#
############ STACK_TRACE_BUILDER #####################
Function_Name="$0"
Function_PATH="${Function_PATH}/${Function_Name}"
######################################################
MSG_DISPLAY "Debug4" "Current Stack : [ ${Function_PATH} ] "
PKG_INSTALL_CTRL_Sourcing_PKG_CONF
MSG_DISPLAY "Info" "Needed PKG : [ None ] "
MSG_DISPLAY "Info" "Installing Package : [ ${PKG_TCL} ] "

################## TCL   #####################
Internet_Http_Get "${URL_TCL}" "${PKG_TCL}.${Pkg_ext_tgz}"  "${PWD_DLW_PKG}" ""
if [ "${EXTERNAL_ONLY_GET}" = "True" ]
   then
       MSG_DISPLAY "Info" "Get only Package : [ ${PKG_TCL} ] "
   else
       archive_file_extract_tgz "${PWD_DLW_PKG}" "${PKG_TCL}" "${Pkg_ext_tgz}"
       Base_Compile_OutPut_Redirector="${Prefix_Log_File}_${0}_$(date +%d_%m_%y).log"
       Base_Param_type_PKG="CUSTOM"
       Base_Param_PKG_To_Compile="${PKG_TCL}"
       Custom_Pkg_Configurator="./unix/configure"
       Base_Param_Compile_Options="--prefix=${BASE_PATH_TCL}"
       Base_Param_PKG_To_Compile_Option_Path=""
       Base_Param_Make_Options="Dummy"
       Base_Param_Make_Install_Options="Dummy"
       Base_Param_Make_clean="TRUE"
       Base_Param_Post_Compile_Action="COMPILE_Magic_linker"
       Base_Param_PKG_to_link=${Base_Param_PKG_To_Compile}
       Base_INTRA_DIRS="${BASE_PATH_TCL}"
       COMPILE_Generics_Base_func
fi

############### Stack_TRACE_BUILDER ################
Function_PATH="$( dirname ${Function_PATH} )"
####################################################
}


function PKG_INSTALL_TK      # PKG_installable_ok
{
#|# Var to set  : None
#|#
#|# Base usage  : PKG_INSTALL_TK
#|#
#|# Description : This function is used to launche TK compile
#|#
#|# Send Back   : Package compilation
#|#
############ STACK_TRACE_BUILDER #####################
Function_Name="$0"
Function_PATH="${Function_PATH}/${Function_Name}"
######################################################
MSG_DISPLAY "Debug4" "Current Stack : [ ${Function_PATH} ] "
PKG_INSTALL_CTRL_Sourcing_PKG_CONF
MSG_DISPLAY "Info" "Needed PKG : [ ${PKG_TCL} ] "
PKG_INSTALL_TCL
MSG_DISPLAY "Info" "Installing Package : [ ${PKG_TK} ] "

################## TK   #####################
Internet_Http_Get "${URL_TK}" "${PKG_TK}.${Pkg_ext_tgz}"  "${PWD_DLW_PKG}" ""
if [ "${EXTERNAL_ONLY_GET}" = "True" ]
   then
       MSG_DISPLAY "Info" "Get only Package : [ ${PKG_TK} ] "
   else
       archive_file_extract_tgz "${PWD_DLW_PKG}" "${PKG_TK}" "${Pkg_ext_tgz}"
       Base_Compile_OutPut_Redirector="${Prefix_Log_File}_${0}_$(date +%d_%m_%y).log"
       Base_Param_type_PKG="CUSTOM"
       Custom_Pkg_Configurator="./unix/configure"
       Base_Param_PKG_To_Compile="${PKG_TK}"
       Base_Param_Compile_Options="--prefix=${BASE_PATH_TCL} --with-tcl=${BASE_PATH_TCL}/lib without-x"
       Base_Param_PKG_To_Compile_Option_Path=""
       Base_Param_Make_Options="Dummy"
       Base_Param_Make_Install_Options="Dummy"
       Base_Param_Make_clean="TRUE"
       Base_Param_Post_Compile_Action="COMPILE_Magic_linker"
       Base_Param_PKG_to_link=${Base_Param_PKG_To_Compile}
       Base_INTRA_DIRS="${BASE_PATH_TK}"
       COMPILE_Generics_Base_func
fi

############### Stack_TRACE_BUILDER ################
Function_PATH="$( dirname ${Function_PATH} )"
####################################################
}



function PKG_INSTALL_EXPECT                            # PKG_installable_ok
{
#|# Var to set  : None
#|#
#|# Base usage  : PKG_INSTALL_EXPECT
#|#
#|# Description : This function is used to launche EXPECT compile
#|#
#|# Send Back   : Package compilation
#|#
############ STACK_TRACE_BUILDER #####################
Function_Name="$0"
Function_PATH="${Function_PATH}/${Function_Name}"
######################################################
MSG_DISPLAY "Debug4" "Current Stack : [ ${Function_PATH} ] "
PKG_INSTALL_CTRL_Sourcing_PKG_CONF
MSG_DISPLAY "Info" "Needed PKG : [ ${PKG_TK} ] "
#PKG_INSTALL_TK
MSG_DISPLAY "Info" "Installing Package : [ ${PKG_EXPECT} ] "

################## EXPECT   #####################
Internet_Http_Get "${URL_EXPECT}" "${PKG_EXPECT}.${Pkg_ext_tgz}"  "${PWD_DLW_PKG}" ""
if [ "${EXTERNAL_ONLY_GET}" = "True" ]
   then
       MSG_DISPLAY "Info" "Get only Package : [ ${PKG_EXPECT} ] "
   else
       archive_file_extract_tgz "${PWD_DLW_PKG}" "${PKG_EXPECT}" "${Pkg_ext_tgz}"
       Base_Compile_OutPut_Redirector="${Prefix_Log_File}_${0}_$(date +%d_%m_%y).log"
       Base_Param_type_PKG="STD"
       Base_Param_PKG_To_Compile="${PKG_EXPECT}"
       Base_Param_Compile_Options="--prefix=${BASE_PATH_EXPECT} "
       Base_Param_PKG_To_Compile_Option_Path=""
       Base_Param_Make_Options="Dummy"
       Base_Param_Make_Install_Options="Dummy"
       Base_Param_Make_clean="TRUE"
       Base_Param_Post_Compile_Action="COMPILE_Magic_linker"
       Base_Param_PKG_to_link=${Base_Param_PKG_To_Compile}
       Base_INTRA_DIRS="${BASE_PATH_EXPECT}"
       COMPILE_Generics_Base_func
fi

############### Stack_TRACE_BUILDER ################
Function_PATH="$( dirname ${Function_PATH} )"
####################################################
}



function PKG_INSTALL_EXPAT                       # PKG_installable_ok
{
#|# Var to set  : None
#|#
#|# Base usage  : PKG_INSTALL_EXPAT
#|#
#|# Description : This function is used to launche EXPAT compile
#|#
#|# Send Back   : Package compilation
#|#
############ STACK_TRACE_BUILDER #####################
Function_Name="$0"
Function_PATH="${Function_PATH}/${Function_Name}"
######################################################
MSG_DISPLAY "Debug4" "Current Stack : [ ${Function_PATH} ] "
PKG_INSTALL_CTRL_Sourcing_PKG_CONF
MSG_DISPLAY "Info" "Needed PKG : [ None ] "
MSG_DISPLAY "Info" "Installing Package : [ ${PKG_EXPAT} ] "

################## EXPAT   #####################
Internet_Http_Get "${URL_EXPAT}" "${PKG_EXPAT}.${Pkg_ext_tgz}"  "${PWD_DLW_PKG}" ""
if [ "${EXTERNAL_ONLY_GET}" = "True" ]
   then
       MSG_DISPLAY "Info" "Get only Package : [ ${PKG_EXPAT} ] "
   else
       archive_file_extract_tgz "${PWD_DLW_PKG}" "${PKG_EXPAT}" "${Pkg_ext_tgz}"
       Base_Compile_OutPut_Redirector="${Prefix_Log_File}_${0}_$(date +%d_%m_%y).log"
       Base_Param_type_PKG="STD"
       Base_Param_PKG_To_Compile="${PKG_EXPAT}"
       Base_Param_Compile_Options="--prefix=${BASE_PATH_EXPAT}  --with-gnu-ld "
       Base_Param_PKG_To_Compile_Option_Path=""
       Base_Param_Make_Options="Dummy"
       Base_Param_Make_Install_Options="Dummy"
       Base_Param_Make_clean="TRUE"
       Base_Param_Post_Compile_Action="COMPILE_Magic_linker"
       Base_Param_PKG_to_link=${Base_Param_PKG_To_Compile}
       Base_INTRA_DIRS="${BASE_PATH_EXPAT}"
       COMPILE_Generics_Base_func
fi

############### Stack_TRACE_BUILDER ################
Function_PATH="$( dirname ${Function_PATH} )"
####################################################
}


function PKG_INSTALL_xml                        # PKG_installable_ok
{
#|# Var to set  : None
#|#
#|# Base usage  : PKG_INSTALL_xml
#|#
#|# Description : This function is used to launche XML compile
#|#
#|# Send Back   : Package compilation
#|#
############ STACK_TRACE_BUILDER #####################
Function_Name="$0"
Function_PATH="${Function_PATH}/${Function_Name}"
######################################################
MSG_DISPLAY "Debug4" "Current Stack : [ ${Function_PATH} ] "
PKG_INSTALL_CTRL_Sourcing_PKG_CONF
MSG_DISPLAY "Info" "Needed PKG : [ None ] "
MSG_DISPLAY "Info" "Installing Package : [ ${PKG_XML} ] "

################## XML   #####################
Internet_Http_Get "${URL_XML}" "${PKG_XML}.${Pkg_ext_tgz}"  "${PWD_DLW_PKG}" ""
if [ "${EXTERNAL_ONLY_GET}" = "True" ]
   then
       MSG_DISPLAY "Info" "Get only Package : [ ${PKG_XML} ] "
   else
       archive_file_extract_tgz "${PWD_DLW_PKG}" "${PKG_XML}" "${Pkg_ext_tgz}"
       Base_Compile_OutPut_Redirector="${Prefix_Log_File}_${0}_$(date +%d_%m_%y).log"
       Base_Param_type_PKG="STD"
       Base_Param_PKG_To_Compile="${PKG_XML}"
       Base_Param_Compile_Options="--prefix=${BASE_PATH_XML}  --with-zlib=${BASE_PATH_ZLIB} --enable-static --disable-libtool-lock  --enable-ipv6=no --with-gnu-ld --with-pic --with-c14n --with-catalog --with-docbook --with-fexceptions --with-ftp --with-history --with-html  --with-iconv --with-legacy --with-minimum --with-output --with-pattern --with-push --with-python --with-reader --with-readline --with-regexps --with-sax1 --with-schemas --with-schematron --with-threads --with-thread-alloc --with-tree  --with-valid --with-writer --with-xinclude --with-xpath  -with-xptr "
       Base_Param_PKG_To_Compile_Option_Path=""
       Base_Param_Make_Options="Dummy"
       Base_Param_Make_Install_Options="Dummy"
       Base_Param_Make_clean="TRUE"
       Base_Param_Post_Compile_Action="COMPILE_Magic_linker"
       Base_Param_PKG_to_link=${Base_Param_PKG_To_Compile}
       Base_INTRA_DIRS="${BASE_PATH_XML}"
       COMPILE_Generics_Base_func
fi

############### Stack_TRACE_BUILDER ################
Function_PATH="$( dirname ${Function_PATH} )"
####################################################
}

function PKG_INSTALL_PNG                        # PKG_installable_ok
{
#|# Var to set  : None
#|#
#|# Base usage  : PKG_INSTALL_PNG
#|#
#|# Description : This function is used to launche PNG compile
#|#
#|# Send Back   : Package compilation
#|#
############ STACK_TRACE_BUILDER #####################
Function_Name="$0"
Function_PATH="${Function_PATH}/${Function_Name}"
######################################################
MSG_DISPLAY "Debug4" "Current Stack : [ ${Function_PATH} ] "
PKG_INSTALL_CTRL_Sourcing_PKG_CONF
MSG_DISPLAY "Info" "Needed PKG : [ None ] "
MSG_DISPLAY "Info" "Installing Package : [ ${PKG_PNG} ] "

################## PNG   #####################
Internet_Http_Get "${URL_PNG}" "${PKG_PNG}.${Pkg_ext_tgz}"  "${PWD_DLW_PKG}" ""
if [ "${EXTERNAL_ONLY_GET}" = "True" ]
   then
       MSG_DISPLAY "Info" "Get only Package : [ ${PKG_PNG} ] "
   else
       archive_file_extract_tgz "${PWD_DLW_PKG}" "${PKG_PNG}" "${Pkg_ext_tgz}"
       Base_Compile_OutPut_Redirector="${Prefix_Log_File}_${0}_$(date +%d_%m_%y).log"
       Base_Param_type_PKG="STD"
       Base_Param_PKG_To_Compile="${PKG_PNG}"
       Base_Param_Compile_Options="--prefix=${BASE_PATH_PNG} --with-libpng-compat "
       Base_Param_PKG_To_Compile_Option_Path=""
       Base_Param_Make_Options="Dummy"
       Base_Param_Make_Install_Options="Dummy"
       Base_Param_Make_clean="TRUE"
       Base_Param_Post_Compile_Action="COMPILE_Magic_linker"
       Base_Param_PKG_to_link=${Base_Param_PKG_To_Compile}
       Base_INTRA_DIRS="${BASE_PATH_PNG}"
       COMPILE_Generics_Base_func
fi

############### Stack_TRACE_BUILDER ################
Function_PATH="$( dirname ${Function_PATH} )"
####################################################
}


function PKG_INSTALL_xsl             # PKG_installable_ok
{
#|# Var to set  : None
#|#
#|# Base usage  : PKG_INSTALL_xsl
#|#
#|# Description : This function is used to launche XSL compile
#|#
#|# Send Back   : Package compilation
#|#
############ STACK_TRACE_BUILDER #####################
Function_Name="$0"
Function_PATH="${Function_PATH}/${Function_Name}"
######################################################
MSG_DISPLAY "Debug4" "Current Stack : [ ${Function_PATH} ] "
PKG_INSTALL_CTRL_Sourcing_PKG_CONF
MSG_DISPLAY "Info" "Needed PKG : [ ${PKG_XML} ] "
PKG_INSTALL_xml
MSG_DISPLAY "Info" "Installing Package : [ ${PKG_XSL} ] "

################## XSL   #####################
Internet_Http_Get "${URL_XSL}" "${PKG_XSL}.${Pkg_ext_tgz}"  "${PWD_DLW_PKG}" ""

if [ "${EXTERNAL_ONLY_GET}" = "True" ]
   then
       MSG_DISPLAY "Info" "Get only Package : [ ${PKG_XSL} ] "
   else
       archive_file_extract_tgz "${PWD_DLW_PKG}" "${PKG_XSL}" "${Pkg_ext_tgz}"
       Base_Compile_OutPut_Redirector="${Prefix_Log_File}_${0}_$(date +%d_%m_%y).log"
       Base_Param_type_PKG="STD"
       Base_Param_PKG_To_Compile="${PKG_XSL}"
       Base_Param_Compile_Options="--prefix=${BASE_PATH_XSL} -with-libxml-prefix=${BASE_PATH_XML} "
       Base_Param_PKG_To_Compile_Option_Path=""
       Base_Param_Make_Options="Dummy"
       Base_Param_Make_Install_Options="Dummy"
       Base_Param_Make_clean="TRUE"
       Base_Param_Post_Compile_Action="COMPILE_Magic_linker"
       Base_Param_PKG_to_link=${Base_Param_PKG_To_Compile}
       Base_INTRA_DIRS="${BASE_PATH_XSL}"
       COMPILE_Generics_Base_func
fi

############### Stack_TRACE_BUILDER ################
Function_PATH="$( dirname ${Function_PATH} )"
####################################################
}

function PKG_INSTALL_zlib                 # PKG_installable_ok
{
#|# Var to set  : None
#|#
#|# Base usage  : PKG_INSTALL_zlib
#|#
#|# Description : This function is used to launche ZLIB compile
#|#
#|# Send Back   : Package compilation
#|#
############ STACK_TRACE_BUILDER #####################
Function_Name="$0"
Function_PATH="${Function_PATH}/${Function_Name}"
######################################################
MSG_DISPLAY "Debug4" "Current Stack : [ ${Function_PATH} ] "
PKG_INSTALL_CTRL_Sourcing_PKG_CONF
MSG_DISPLAY "Info" "Needed PKG : [ None ] "
MSG_DISPLAY "Info" "Installing Package : [ ${PKG_ZLIB} ] "

##################  Flex   #####################
Internet_Http_Get "${URL_ZLIB}" "${PKG_ZLIB}.${Pkg_ext_tgz}"  "${PWD_DLW_PKG}" ""
if [ "${EXTERNAL_ONLY_GET}" = "True" ]
   then
       MSG_DISPLAY "Info" "Get only Package : [ ${PKG_ZLIB} ] "
   else
        archive_file_extract_tgz "${PWD_DLW_PKG}" "${PKG_ZLIB}" "${Pkg_ext_tgz}"
        Base_Compile_OutPut_Redirector="${Prefix_Log_File}_${0}_$(date +%d_%m_%y).log"
        Base_Param_type_PKG="STD"
        Base_Param_PKG_To_Compile="${PKG_ZLIB}"
        Base_Param_Compile_Options="--prefix=${BASE_PATH_ZLIB}"
        Base_Param_PKG_To_Compile_Option_Path=""
        Base_Param_Make_Options="Dummy"
        Base_Param_Make_Install_Options="Dummy"
        Base_Param_Make_clean="TRUE"
        Base_Param_Post_Compile_Action="COMPILE_Magic_linker"
        Base_Param_PKG_to_link=${Base_Param_PKG_To_Compile}
        Base_INTRA_DIRS="${BASE_PATH_ZLIB}"
        COMPILE_Generics_Base_func
fi

############### Stack_TRACE_BUILDER ################
Function_PATH="$( dirname ${Function_PATH} )"
####################################################
}

function PKG_INSTALL_Readline                    # PKG_installable_ok
{
#|# Var to set  : None
#|#
#|# Base usage  : PKG_INSTALL_Readline
#|#
#|# Description : This function is used to launche ReadLine compile
#|#
#|# Send Back   : Package compilation
#|#
############ STACK_TRACE_BUILDER #####################
Function_Name="$0"
Function_PATH="${Function_PATH}/${Function_Name}"
######################################################
MSG_DISPLAY "Debug4" "Current Stack : [ ${Function_PATH} ] "
PKG_INSTALL_CTRL_Sourcing_PKG_CONF
MSG_DISPLAY "Info" "Needed PKG : [ None ] "
MSG_DISPLAY "Info" "Installing Package : [ ${PKG_READLINE} ] "

##################  READLINE   #####################
Internet_Http_Get "${URL_READLINE}" "${PKG_READLINE}.${Pkg_ext_tgz}" "${PWD_DLW_PKG}" ""

if [ "${EXTERNAL_ONLY_GET}" = "True" ]
   then
       MSG_DISPLAY "Info" "Get only Package : [ ${PKG_READLINE} ] "
   else
       archive_file_extract_tgz "${PWD_DLW_PKG}" "${PKG_READLINE}" "${Pkg_ext_tgz}"
       Base_Compile_OutPut_Redirector="${Prefix_Log_File}_${0}_$(date +%d_%m_%y).log"
       Base_Param_type_PKG="STD"
       Base_Param_PKG_To_Compile="${PKG_READLINE}"
       Base_Param_Compile_Options="--prefix=${BASE_PATH_READLINE}"
       Base_Param_PKG_To_Compile_Option_Path=""
       Base_Param_Make_Options="Dummy"
       Base_Param_Make_Install_Options="Dummy"
       Base_Param_Make_clean="TRUE"
       Base_Param_Post_Compile_Action="COMPILE_Magic_linker"
       Base_Param_PKG_to_link=${Base_Param_PKG_To_Compile}
       Base_INTRA_DIRS="${BASE_PATH_READLINE}"
       COMPILE_Generics_Base_func
fi

############### Stack_TRACE_BUILDER ################
Function_PATH="$( dirname ${Function_PATH} )"
####################################################
}

function PKG_INSTALL_Flex                # PKG_installable_ok
{
#|# Var to set  : None
#|#
#|# Base usage  : PKG_INSTALL_Flex
#|#
#|# Description : This function is used to launche FLEX compile
#|#
#|# Send Back   : Package compilation
#|#
############ STACK_TRACE_BUILDER #####################
Function_Name="$0"
Function_PATH="${Function_PATH}/${Function_Name}"
######################################################
MSG_DISPLAY "Debug4" "Current Stack : [ ${Function_PATH} ] "
PKG_INSTALL_CTRL_Sourcing_PKG_CONF
MSG_DISPLAY "Info" "Needed PKG : [ None ] "
MSG_DISPLAY "Info" "Installing Package : [ ${PKG_FLEX} ] "

################## FLEX  #########################
Internet_Http_Get "${URL_FLEX}" "${PKG_FLEX}.${Pkg_ext_tgz}" "${PWD_DLW_PKG}" ""

if [ "${EXTERNAL_ONLY_GET}" = "True" ]
   then
       MSG_DISPLAY "Info" "Get only Package : [ ${PKG_FLEX} ] "
   else
       archive_file_extract_tgz "${PWD_DLW_PKG}" "${PKG_FLEX}" "${Pkg_ext_tgz}"
       Base_Compile_OutPut_Redirector="${Prefix_Log_File}_${0}_$(date +%d_%m_%y).log"
       Base_Param_type_PKG="STD"
       Base_Param_PKG_To_Compile="${PKG_FLEX}"
       Base_Param_Compile_Options="--prefix=${BASE_PATH_FLEX}"
       Base_Param_PKG_To_Compile_Option_Path=""
       Base_Param_Make_Options="Dummy"
       Base_Param_Make_Install_Options="Dummy"
       Base_Param_Make_clean="TRUE"
       Base_Param_Post_Compile_Action="COMPILE_Magic_linker"
       Base_Param_PKG_to_link=${Base_Param_PKG_To_Compile}
       Base_INTRA_DIRS="${BASE_PATH_FLEX}"
       COMPILE_Generics_Base_func
fi

############### Stack_TRACE_BUILDER ################
Function_PATH="$( dirname ${Function_PATH} )"
####################################################
}

function PKG_INSTALL_Mhash                                   # PKG_installable_ok
{
#|# Var to set  : None
#|#
#|# Base usage  : PKG_INSTALL_Mhash
#|#
#|# Description : This function is used to launche Mhash compile
#|#
#|# Send Back   : Package compilation
#|#
############ STACK_TRACE_BUILDER #####################
Function_Name="$0"
Function_PATH="${Function_PATH}/${Function_Name}"
######################################################
MSG_DISPLAY "Debug4" "Current Stack : [ ${Function_PATH} ] "
PKG_INSTALL_CTRL_Sourcing_PKG_CONF
MSG_DISPLAY "Info" "Needed PKG : [ None ] "
MSG_DISPLAY "Info" "Installing Package : [ ${PKG_MHASH} ] "

################# MHASH  ##########################
Internet_Http_Get "${URL_MHASH}" "${PKG_MHASH}.${Pkg_ext_tgz}" "${PWD_DLW_PKG}" ""

if [ "${EXTERNAL_ONLY_GET}" = "True" ]
   then
       MSG_DISPLAY "Info" "Get only Package : [ ${PKG_MHASH} ] "
   else
       archive_file_extract_tgz "${PWD_DLW_PKG}" "${PKG_MHASH}" "${Pkg_ext_tgz}"
       Base_Compile_OutPut_Redirector="${Prefix_Log_File}_${0}_$(date +%d_%m_%y).log"
       Base_Param_type_PKG="STD"
       Base_Param_PKG_To_Compile="${PKG_MHASH}"
       Base_Param_Compile_Options="--prefix=${BASE_PATH_MHASH}"
       Base_Param_PKG_To_Compile_Option_Path=""
       Base_Param_Make_Options="Dummy"
       Base_Param_Make_Install_Options="Dummy"
       Base_Param_Make_clean="TRUE"
       Base_Param_Post_Compile_Action="COMPILE_Magic_linker"
       Base_Param_PKG_to_link=${Base_Param_PKG_To_Compile}
       Base_INTRA_DIRS="${BASE_PATH_MHASH}"
       COMPILE_Generics_Base_func
fi

############### Stack_TRACE_BUILDER ################
Function_PATH="$( dirname ${Function_PATH} )"
####################################################
}

function PKG_INSTALL_Libmcrypt                              # PKG_installable_ok
{
#|# Var to set  : None
#|#
#|# Base usage  : PKG_INSTALL_Libmcrypt
#|#
#|# Description : This function is used to launche LibMcrypt compile
#|#
#|# Send Back   : Package compilation
#|#
############ STACK_TRACE_BUILDER #####################
Function_Name="$0"
Function_PATH="${Function_PATH}/${Function_Name}"
######################################################
MSG_DISPLAY "Debug4" "Current Stack : [ ${Function_PATH} ] "
PKG_INSTALL_CTRL_Sourcing_PKG_CONF
MSG_DISPLAY "Info" "Needed PKG : [${PKG_MHASH}] "
PKG_INSTALL_Mhash
MSG_DISPLAY "Info" "Installing Package : [ ${PKG_LIB_MCRYPT} ] "

################# LibMCrypt 2.5.7 ##########################

Internet_Http_Get "${URL_MCRYPT}" "${PKG_LIB_MCRYPT}.${Pkg_ext_tgz}" "${PWD_DLW_PKG}" ""

if [ "${EXTERNAL_ONLY_GET}" = "True" ]
   then
       MSG_DISPLAY "Info" "Get only Package : [ ${PKG_LIB_MCRYPT} ] "
   else
       archive_file_extract_tgz "${PWD_DLW_PKG}" "${PKG_LIB_MCRYPT}" "${Pkg_ext_tgz}"
       Base_Compile_OutPut_Redirector="${Prefix_Log_File}_${0}_$(date +%d_%m_%y).log"
       Base_Param_type_PKG="STD"
       Base_Param_PKG_To_Compile="${PKG_LIB_MCRYPT}"
       Base_Param_Compile_Options="--prefix=${BASE_PATH_LIBMCRYPT}"
       Base_Param_PKG_To_Compile_Option_Path=""
       Base_Param_Make_Options="Dummy"
       Base_Param_Make_Install_Options="Dummy"
       Base_Param_Make_clean="TRUE"
       Base_Param_Post_Compile_Action="COMPILE_Magic_linker"
       Base_Param_PKG_to_link=${Base_Param_PKG_To_Compile}
       Base_INTRA_DIRS="${BASE_PATH_LIBMCRYPT}"
       COMPILE_Generics_Base_func
fi
############### Stack_TRACE_BUILDER ################
Function_PATH="$( dirname ${Function_PATH} )"
####################################################
}

function PKG_INSTALL_Mcrypt                            # PKG_installable_ok
{
#|# Var to set  : None
#|#
#|# Base usage  : PKG_INSTALL_Mcrypt
#|#
#|# Description : This function is used to launche Mcrypt compile
#|#
#|# Send Back   : Package compilation
#|#
############ STACK_TRACE_BUILDER #####################
Function_Name="$0"
Function_PATH="${Function_PATH}/${Function_Name}"
######################################################
MSG_DISPLAY "Debug4" "Current Stack : [ ${Function_PATH} ] "
PKG_INSTALL_CTRL_Sourcing_PKG_CONF
MSG_DISPLAY "Info" "Needed PKG : [ ${PKG_LIB_MCRYPT} ] "
PKG_INSTALL_Libmcrypt
MSG_DISPLAY "Info" "Installing Package : [ ${PKG_MCRYPT} ] "

################# Mcrypt 2.6.4  ############################
Internet_Http_Get "${URL_MCRYPT}" "${PKG_MCRYPT}.${Pkg_ext_tgz}" "${PWD_DLW_PKG}" ""

if [ "${EXTERNAL_ONLY_GET}" = "True" ]
   then
       MSG_DISPLAY "Info" "Get only Package : [ ${PKG_MCRYPT} ] "
   else
       archive_file_extract_tgz "${PWD_DLW_PKG}" "${PKG_MCRYPT}" "${Pkg_ext_tgz}"
       Base_Compile_OutPut_Redirector="${Prefix_Log_File}_${0}_$(date +%d_%m_%y).log"
       Base_Param_type_PKG="STD"
       Base_Param_PKG_To_Compile="${PKG_MCRYPT}"
       Base_Param_Compile_Options="--prefix=${BASE_PATH_MCRYPT} --with-libmcrypt-prefix=${BASE_PATH_LIBMCRYPT}"
       Base_Param_PKG_To_Compile_Option_Path=""
       Base_Param_Make_Options="Dummy"
       Base_Param_Make_Install_Options="Dummy"
       Base_Param_Make_clean="TRUE"
       Base_Param_Post_Compile_Action="COMPILE_Magic_linker"
       Base_Param_PKG_to_link=${Base_Param_PKG_To_Compile}
       Base_INTRA_DIRS="${BASE_PATH_MCRYPT}"
       COMPILE_Generics_Base_func
fi

############### Stack_TRACE_BUILDER ################
Function_PATH="$( dirname ${Function_PATH} )"
####################################################
}

function PKG_INSTALL_OpenSsl                           # PKG_installable_ok
{
#|# Var to set  : None
#|#
#|# Base usage  : PKG_INSTALL_OpenSsl
#|#
#|# Description : This function is used to launche OpenSSL compile
#|#
#|# Send Back   : Package compilation
#|#
############ STACK_TRACE_BUILDER #####################
Function_Name="$0"
Function_PATH="${Function_PATH}/${Function_Name}"
######################################################
MSG_DISPLAY "Debug4" "Current Stack : [ ${Function_PATH} ] "
PKG_INSTALL_CTRL_Sourcing_PKG_CONF
MSG_DISPLAY "Info" "Needed PKG : [ ${PKG_MCRYPT} ] "
PKG_INSTALL_Mcrypt
MSG_DISPLAY "Info" "Installing Package : [ ${PKG_OPENSSL} ] "


################# OpenSSL 0.9.7 ############################
Internet_Http_Get "${URL_OPENSSL}" "${PKG_OPENSSL}.${Pkg_ext_tgz}" "${PWD_DLW_PKG}" ""

if [ "${EXTERNAL_ONLY_GET}" = "True" ]
   then
       MSG_DISPLAY "Info" "Get only Package : [ ${PKG_OPENSSL} ] "
   else
       archive_file_extract_tgz "${PWD_DLW_PKG}" "${PKG_OPENSSL}" "${Pkg_ext_tgz}"
       Base_Compile_OutPut_Redirector="${Prefix_Log_File}_${0}_$(date +%d_%m_%y).log"
       Base_Param_type_PKG="STD"
       Base_Param_PKG_To_Compile="${PKG_OPENSSL}"
       Base_Param_Compile_Options="--prefix=${BASE_PATH_OPENSSL} --openssldir=${BASE_PATH_OPENSSL} linux-elf "
       Base_Param_PKG_To_Compile_Option_Path=""
       Base_Param_Make_Options="Dummy"
       Base_Param_Make_Install_Options="Dummy"
       Base_Param_Make_clean="TRUE"
       Base_Param_Post_Compile_Action="COMPILE_Magic_linker"
       Base_Param_PKG_to_link=${Base_Param_PKG_To_Compile}
       Base_INTRA_DIRS="${BASE_PATH_OPENSSL}"
       COMPILE_Generics_Base_func
fi

############### Stack_TRACE_BUILDER ################
Function_PATH="$( dirname ${Function_PATH} )"
####################################################
}

function PKG_INSTALL_GD                              # PKG_installable_ok
{
#|# Var to set  : None
#|#
#|# Base usage  : PKG_INSTALL_GD
#|#
#|# Description : This function is used to launche GD compile
#|#
#|# Send Back   : Package compilation
#|#
############ STACK_TRACE_BUILDER #####################
Function_Name="$0"
Function_PATH="${Function_PATH}/${Function_Name}"
######################################################
MSG_DISPLAY "Debug4" "Current Stack : [ ${Function_PATH} ] "
PKG_INSTALL_CTRL_Sourcing_PKG_CONF
MSG_DISPLAY "Info" "Needed PKG : [ ${PKG_PNG} ] "
PKG_INSTALL_PNG
MSG_DISPLAY "Info" "Installing Package : [ ${PKG_GD} ] "

################  GD 2.0.33   ########################
Internet_Http_Get "${URL_GD}" "${PKG_GD}.${Pkg_ext_tgz}" "${PWD_DLW_PKG}" ""

if [ "${EXTERNAL_ONLY_GET}" = "True" ]
   then
       MSG_DISPLAY "Info" "Get only Package : [ ${PKG_GD} ] "
   else
       archive_file_extract_tgz "${PWD_DLW_PKG}" "${PKG_GD}" "${Pkg_ext_tgz}"
       Base_Compile_OutPut_Redirector="${Prefix_Log_File}_${0}_$(date +%d_%m_%y).log"
       Base_Param_type_PKG="STD"
       Base_Param_PKG_To_Compile="${PKG_GD}"
       Base_Param_Compile_Options="--prefix=${BASE_PATH_GD} --with-png=${BASE_PATH_PNG}"
       Base_Param_PKG_To_Compile_Option_Path=""
       Base_Param_Make_Options="Dummy"
       Base_Param_Make_Install_Options="Dummy"
       Base_Param_Make_clean="TRUE"
       Base_Param_Post_Compile_Action="COMPILE_Magic_linker"
       Base_Param_PKG_to_link=${Base_Param_PKG_To_Compile}
       Base_INTRA_DIRS="${BASE_PATH_GD}"
       COMPILE_Generics_Base_func
fi

############### Stack_TRACE_BUILDER ################
Function_PATH="$( dirname ${Function_PATH} )"
####################################################
}

function PKG_INSTALL_LIBIDN                           # PKG_installable_ok
{
#|# Var to set  : None
#|#
#|# Base usage  : PKG_INSTALL_LIBIDN
#|#
#|# Description : This function is used to launche LIBIDN compile
#|#
#|# Send Back   : Package compilation
#|#
############ STACK_TRACE_BUILDER #####################
Function_Name="$0"
Function_PATH="${Function_PATH}/${Function_Name}"
######################################################
MSG_DISPLAY "Debug4" "Current Stack : [ ${Function_PATH} ] "
PKG_INSTALL_CTRL_Sourcing_PKG_CONF
MSG_DISPLAY "Info" "Needed PKG : [ None ] "
MSG_DISPLAY "Info" "Installing Package : [ ${PKG_LIBIDN} ] "

################  LIBIDN        ########################
Internet_Http_Get "${URL_LIBIDN}" "${PKG_LIBIDN}.${Pkg_ext_tgz}" "${PWD_DLW_PKG}" ""

if [ "${EXTERNAL_ONLY_GET}" = "True" ]
   then
       MSG_DISPLAY "Info" "Get only Package : [ ${PKG_LIBIDN} ] "
   else
       archive_file_extract_tgz "${PWD_DLW_PKG}" "${PKG_LIBIDN}" "${Pkg_ext_tgz}"
       Base_Compile_OutPut_Redirector="${Prefix_Log_File}_${0}_$(date +%d_%m_%y).log"
       Base_Param_type_PKG="STD"
       Base_Param_PKG_To_Compile="${PKG_LIBIDN}"
       Base_Param_Compile_Options="--prefix=${BASE_PATH_LIBIDN}  --enable-static --disable-csharp"
       Base_Param_PKG_To_Compile_Option_Path=""
       Base_Param_Make_Options="Dummy"
       Base_Param_Make_Install_Options="Dummy"
       Base_Param_Make_clean="TRUE"
       Base_Param_Post_Compile_Action="COMPILE_Magic_linker"
       Base_Param_PKG_to_link=${Base_Param_PKG_To_Compile}
       Base_INTRA_DIRS="${BASE_PATH_LIBIDN}"
       COMPILE_Generics_Base_func
fi


############### Stack_TRACE_BUILDER ################
Function_PATH="$( dirname ${Function_PATH} )"
####################################################
}



function PKG_INSTALL_Curl                             # PKG_installable_ok
{
#|# Var to set  : None
#|#
#|# Base usage  : PKG_INSTALL_Curl
#|#
#|# Description : This function is used to launche CURL compile
#|#
#|# Send Back   : Package compilation
#|#
############ STACK_TRACE_BUILDER #####################
Function_Name="$0"
Function_PATH="${Function_PATH}/${Function_Name}"
######################################################
MSG_DISPLAY "Debug4" "Current Stack : [ ${Function_PATH} ] "
PKG_INSTALL_CTRL_Sourcing_PKG_CONF
MSG_DISPLAY "Info" "Needed PKG : [ LIBIDN ] "
PKG_INSTALL_LIBIDN
MSG_DISPLAY "Info" "Installing Package : [ ${PKG_CURL} ] "

################  CURL        ########################
Internet_Http_Get "${URL_CURL}" "${PKG_CURL}.${Pkg_ext_tgz}" "${PWD_DLW_PKG}" ""

if [ "${EXTERNAL_ONLY_GET}" = "True" ]
   then
       MSG_DISPLAY "Info" "Get only Package : [ ${PKG_CURL} ] "
   else
       archive_file_extract_tgz "${PWD_DLW_PKG}" "${PKG_CURL}" "${Pkg_ext_tgz}"
       Base_Compile_OutPut_Redirector="${Prefix_Log_File}_${0}_$(date +%d_%m_%y).log"
       Base_Param_type_PKG="STD"
       Base_Param_PKG_To_Compile="${PKG_CURL}"
       Base_Param_Compile_Options="--prefix=${BASE_PATH_CURL} --enable-static --with-libidn=${BASE_PATH_LIBIDN}"
       Base_Param_PKG_To_Compile_Option_Path=""
       Base_Param_Make_Options="Dummy"
       Base_Param_Make_Install_Options="Dummy"
       Base_Param_Make_clean="TRUE"
       Base_Param_Post_Compile_Action="COMPILE_Magic_linker"
       Base_Param_PKG_to_link=${Base_Param_PKG_To_Compile}
       Base_INTRA_DIRS="${BASE_PATH_CURL}"
       COMPILE_Generics_Base_func
fi


############### Stack_TRACE_BUILDER ################
Function_PATH="$( dirname ${Function_PATH} )"
####################################################
}


function PKG_INSTALL_Re2c                             # PKG_installable_ok
{
#|# Var to set  : None
#|#
#|# Base usage  : PKG_INSTALL_Re2c
#|#
#|# Description : This function is used to launche RE2C compile
#|#
#|# Send Back   : Package compilation
#|#
############ STACK_TRACE_BUILDER #####################
Function_Name="$0"
Function_PATH="${Function_PATH}/${Function_Name}"
######################################################
MSG_DISPLAY "Debug4" "Current Stack : [ ${Function_PATH} ] "
PKG_INSTALL_CTRL_Sourcing_PKG_CONF
MSG_DISPLAY "Info" "Needed PKG : [ NONE ] "
MSG_DISPLAY "Info" "Installing Package : [ ${PKG_RE2C} ] "

################# Re2C  ##############################
Internet_Http_Get "${URL_RE2C}" "${PKG_RE2C}.${Pkg_ext_tgz}" "${PWD_DLW_PKG}" ""

if [ "${EXTERNAL_ONLY_GET}" = "True" ]
   then
       MSG_DISPLAY "Info" "Get only Package : [ ${PKG_RE2C} ] "
   else
       archive_file_extract_tgz "${PWD_DLW_PKG}" "${PKG_RE2C}" "${Pkg_ext_tgz}"
       Base_Compile_OutPut_Redirector="${Prefix_Log_File}_${0}_$(date +%d_%m_%y).log"
       Base_Param_type_PKG="STD"
       Base_Param_PKG_To_Compile="${PKG_RE2C}"
       Base_Param_Compile_Options="--prefix=${BASE_PATH_RE2C}"
       Base_Param_PKG_To_Compile_Option_Path=""
       Base_Param_Make_Options="Dummy"
       Base_Param_Make_Install_Options="Dummy"
       Base_Param_Make_clean="TRUE"
       Base_Param_Post_Compile_Action="COMPILE_Magic_linker"
       Base_Param_PKG_to_link=${Base_Param_PKG_To_Compile}
       Base_INTRA_DIRS="${BASE_PATH_RE2C}"
       COMPILE_Generics_Base_func
fi

############### Stack_TRACE_BUILDER ################
Function_PATH="$( dirname ${Function_PATH} )"
####################################################
}

function PKG_INSTALL_NCURSES                          # PKG_installable_ok
{
#|# Var to set  : None
#|#
#|# Base usage  : PKG_INSTALL_NCURSES
#|#
#|# Description : This function is used to launche NCURSES compile
#|#
#|# Send Back   : Package compilation
#|#
############ STACK_TRACE_BUILDER #####################
Function_Name="$0"
Function_PATH="${Function_PATH}/${Function_Name}"
######################################################
MSG_DISPLAY "Debug4" "Current Stack : [ ${Function_PATH} ] "
PKG_INSTALL_CTRL_Sourcing_PKG_CONF
MSG_DISPLAY "Info" "Needed PKG : [ NONE ] "
MSG_DISPLAY "Info" "Installing Package : [ ${PKG_NCURSES} ] "

Internet_Http_Get "${URL_NCURSES}" "${PKG_NCURSES}.${Pkg_ext_tgz}" "${PWD_DLW_PKG}" ""


if [ "${EXTERNAL_ONLY_GET}" = "True" ]
   then
       MSG_DISPLAY "Info" "Get only Package : [ ${PKG_NCURSES} ] "
   else
       archive_file_extract_tgz "${PWD_DLW_PKG}" "${PKG_NCURSES}" "${Pkg_ext_tgz}"
       Base_Compile_OutPut_Redirector="${Prefix_Log_File}_${0}_$(date +%d_%m_%y).log"
       Base_Param_type_PKG="STD"
       Base_Param_PKG_To_Compile="${PKG_NCURSES}"
       Base_Param_Compile_Options="--prefix=${BASE_PATH_NCURSES}  "
       Base_Param_Make_Options="Dummy"
       Base_Param_Make_Install_Options="Dummy"
       Base_Param_Make_clean="TRUE"
       Base_Param_Post_Compile_Action="Dummy"
       COMPILE_Generics_Base_func
fi

############### Stack_TRACE_BUILDER ################
Function_PATH="$( dirname ${Function_PATH} )"
####################################################
}

function PKG_INSTALL_MYSQL                            # PKG_installable_ok
{
#|# Var to set  : None
#|#
#|# Base usage  : PKG_INSTALL_MYSQL
#|#
#|# Description : This function is used to launche MYSQL compile
#|#
#|# Send Back   : Package compilation
#|#
############ STACK_TRACE_BUILDER #####################
Function_Name="$0"
Function_PATH="${Function_PATH}/${Function_Name}"
######################################################
MSG_DISPLAY "Debug4" "Current Stack : [ ${Function_PATH} ] "
PKG_INSTALL_CTRL_Sourcing_PKG_CONF
MSG_DISPLAY "Info" "Needed PKG : [ ${PKG_NCURSES} ] "
PKG_INSTALL_NCURSES
MSG_DISPLAY "Info" "Installing Package : [ ${PKG_MYSQL} ] "

Internet_Http_Get "${URL_MYSQL}" "${PKG_MYSQL}.${Pkg_ext_tgz}" "${PWD_DLW_PKG}" ""


if [ "${EXTERNAL_ONLY_GET}" = "True" ]
   then
       MSG_DISPLAY "Info" "Get only Package : [ ${PKG_MYSQL} ] "
   else
       archive_file_extract_tgz "${PWD_DLW_PKG}" "${PKG_MYSQL}" "${Pkg_ext_tgz}"
       Base_Compile_OutPut_Redirector="${Prefix_Log_File}_${0}_$(date +%d_%m_%y).log"
       Base_Param_type_PKG="STD"
       Base_Param_PKG_To_Compile="${PKG_MYSQL}"
       Base_Param_Compile_Options="--prefix=${BASE_PATH_MYSQL} --with-zlib-dir=${BASE_PATH_ZLIB}  --with-openssl=${BASE_PATH_OPENSSL} --enable-thread-safe-client "
       Base_Param_Make_Options="Dummy"
       Base_Param_Make_Install_Options="Dummy"
       Base_Param_Make_clean="TRUE"
       Base_Param_Post_Compile_Action="Dummy"
       COMPILE_Generics_Base_func
fi

############### Stack_TRACE_BUILDER ################
Function_PATH="$( dirname ${Function_PATH} )"
####################################################
}


function PKG_INSTALL_Httpd                            # PKG_installable_ok
{
#|# Var to set  : None
#|#
#|# Base usage  : PKG_INSTALL_Httpd
#|#
#|# Description : This function is used to launche HTTPD compile
#|#
#|# Send Back   : Package compilation
#|#
############ STACK_TRACE_BUILDER #####################
Function_Name="$0"
Function_PATH="${Function_PATH}/${Function_Name}"
######################################################
MSG_DISPLAY "Debug4" "Current Stack : [ ${Function_PATH} ] "
PKG_INSTALL_CTRL_Sourcing_PKG_CONF
MSG_DISPLAY "Info" "Needed PKG : [ NONE ] "
MSG_DISPLAY "Info" "Installing Package : [ ${PKG_HTTPD} ] "

Internet_Http_Get "${URL_HTTPD}" "${PKG_HTTPD}.${Pkg_ext_tgz}" "${PWD_DLW_PKG}" ""

if [ "${EXTERNAL_ONLY_GET}" = "True" ]
   then
       MSG_DISPLAY "Info" "Get only Package : [ ${PKG_HTTPD} ] "
   else
       archive_file_extract_tgz "${PWD_DLW_PKG}" "${PKG_HTTPD}" "${Pkg_ext_tgz}"
       Base_Compile_OutPut_Redirector="${Prefix_Log_File}_${0}_$(date +%d_%m_%y).log"
       Base_Param_type_PKG="STD"
       Base_Param_PKG_To_Compile="${PKG_HTTPD}"
       Base_Param_Compile_Options="--prefix=${BASE_PATH_HTTPD} --enable-ssl --enable-proxy --with-ssl=${BASE_PATH_OPENSSL} --with-z=${BASE_PATH_ZLIB} --enable-so --enable-include --enable-isapi "
       Base_Param_Make_Options="Dummy"
       Base_Param_Make_Install_Options="Dummy"
       Base_Param_Make_clean="TRUE"
       Base_Param_Post_Compile_Action="Dummy"
       COMPILE_Generics_Base_func
fi

############### Stack_TRACE_BUILDER ################
Function_PATH="$( dirname ${Function_PATH} )"
####################################################
}

function PKG_INSTALL_Php                            # PKG_installable_ok
{
#|# Var to set  : None
#|#
#|# Base usage  : PKG_INSTALL_Php
#|#
#|# Description : This function is used to launche PHP compile
#|#
#|# Send Back   : Package compilation
#|#
############ STACK_TRACE_BUILDER #####################
Function_Name="$0"
Function_PATH="${Function_PATH}/${Function_Name}"
######################################################
MSG_DISPLAY "Debug4" "Current Stack : [ ${Function_PATH} ] "
PKG_INSTALL_CTRL_Sourcing_PKG_CONF
MSG_DISPLAY "Info" "Needed PKG : [ ${PKG_MCRYPT} ] "
PKG_INSTALL_Mcrypt
MSG_DISPLAY "Info" "Needed PKG : [ ${PKG_ZLIB} ] "
PKG_INSTALL_zlib
MSG_DISPLAY "Info" "Needed PKG : [ ${PKG_PNG} ] "
PKG_INSTALL_PNG
MSG_DISPLAY "Info" "Needed PKG : [ ${PKG_GD} ] "
PKG_INSTALL_GD
MSG_DISPLAY "Info" "Needed PKG : [ ${PKG_XSL} ] "
PKG_INSTALL_xsl
MSG_DISPLAY "Info" "Needed PKG : [ ${PKG_XML} ] "
PKG_INSTALL_xml
MSG_DISPLAY "Info" "Needed PKG : [ ${PKG_BERKELEYDB} ] "
PKG_INSTALL_Berkeley_Db
MSG_DISPLAY "Info" "Needed PKG : [ ${PKG_OPENSSL} ] "
PKG_INSTALL_OpenSsl
MSG_DISPLAY "Info" "Needed PKG : [ ${PKG_CURL} ] "
PKG_INSTALL_Curl
MSG_DISPLAY "Info" "Needed PKG : [ ${PKG_LDAP} ] "
install_ldap
MSG_DISPLAY "Info" "Needed PKG : [ ${PKG_HTTPD} ] "
PKG_INSTALL_Httpd
MSG_DISPLAY "Info" "Needed PKG : [ ${PKG_MYSQL} ] "
PKG_INSTALL_MYSQL
MSG_DISPLAY "Info" "Needed PKG : [ ${PKG_FLEX} ] "
PKG_INSTALL_Flex
MSG_DISPLAY "Info" "Needed PKG : [ ${PKG_RE2C} ] "
PKG_INSTALL_Re2c
MSG_DISPLAY "Info" "Installing Package : [ ${PKG_PHP} ] "


Internet_Http_Get "${URL_PHP}" "${PKG_PHP}.${Pkg_ext_tgz}" "${PWD_DLW_PKG}" "/from/this/mirror"

if [ "${EXTERNAL_ONLY_GET}" = "True" ]
   then
       MSG_DISPLAY "Info" "Get only Package : [ ${PKG_PHP} ] "
   else
       archive_file_extract_tgz "${PWD_DLW_PKG}" "${PKG_PHP}" "${Pkg_ext_tgz}"
       Base_Compile_OutPut_Redirector="${Prefix_Log_File}_${0}_$(date +%d_%m_%y).log"
       Base_Param_type_PKG="STD"
       Base_Param_PKG_To_Compile="${PKG_PHP}"
       Base_Param_Compile_Options="--prefix=${BASE_PATH_PHP} --with-config-file-path=${BASE_PATH_PHP}/etc --mandir=${BASE_PATH_PHP}/man --with-apxs2=${BASE_PATH_HTTPD}/bin/apxs --with-mysql=${BASE_PATH_MYSQL} --with-zlib-dir=${BASE_PATH_ZLIB} --with-libxml-dir=${BASE_PATH_XML} --with-xsl=${BASE_PATH_XSL} --with-curl=${BASE_PATH_CURL} --with-gd=${BASE_PATH_GD} --with-db4=${BASE_PATH_BERKELEYDB} --with-mcrypt=${BASE_PATH_MCRYPT} --with-openssl=${BASE_PATH_OPENSSL} --enable-mbstring --enable-libgcc  --with-pear=${BASE_PATH_PHP}/lib/pear --enable-static  --with-gnu-ld "
       Base_Param_Make_Options="Dummy"
       Base_Param_Make_clean="TRUE"
       Base_Param_Post_Compile_Action="Php_Magic"
       COMPILE_Generics_Base_func
fi

############### Stack_TRACE_BUILDER ################
Function_PATH="$( dirname ${Function_PATH} )"
####################################################
}

function PKG_INSTALL_Libart                            # PKG_installable_ok
{
#|# Var to set  : None
#|#
#|# Base usage  : PKG_INSTALL_Libart
#|#
#|# Description : This function is used to launche LIBART compile
#|#
#|# Send Back   : Package compilation
#|#
############ STACK_TRACE_BUILDER #####################
Function_Name="$0"
Function_PATH="${Function_PATH}/${Function_Name}"
######################################################
MSG_DISPLAY "Debug4" "Current Stack : [ ${Function_PATH} ] "
PKG_INSTALL_CTRL_Sourcing_PKG_CONF
MSG_DISPLAY "Info" "Needed PKG : [ NONE ] "
MSG_DISPLAY "Info" "Installing Package : [ ${PKG_LIBART} ] "

################# Re2C  ##############################
Internet_Http_Get "${URL_LIBART}" "${PKG_LIBART}.${Pkg_ext_tgz}" "${PWD_DLW_PKG}" ""

if [ "${EXTERNAL_ONLY_GET}" = "True" ]
   then
       MSG_DISPLAY "Info" "Get only Package : [ ${PKG_LIBART} ] "
   else
       archive_file_extract_tgz "${PWD_DLW_PKG}" "${PKG_LIBART}" "${Pkg_ext_tgz}"
       Base_Compile_OutPut_Redirector="${Prefix_Log_File}_${0}_$(date +%d_%m_%y).log"
       Base_Param_type_PKG="STD"
       Base_Param_PKG_To_Compile="${PKG_LIBART}"
       Base_Param_Compile_Options="--prefix=${BASE_PATH_LIBART}"
       Base_Param_PKG_To_Compile_Option_Path=""
       Base_Param_Make_Options="Dummy"
       Base_Param_Make_Install_Options="Dummy"
       Base_Param_Make_clean="TRUE"
       Base_Param_Post_Compile_Action="COMPILE_Magic_linker"
       Base_Param_PKG_to_link=${Base_Param_PKG_To_Compile}
       Base_INTRA_DIRS=`echo ${Base_Param_Compile_Options} | awk -F\-\- '{ print $2 }'  | awk -F\= '{ print $2 }'`
       COMPILE_Generics_Base_func
fi
############### Stack_TRACE_BUILDER ################
Function_PATH="$( dirname ${Function_PATH} )"
####################################################
}


function PKG_INSTALL_custom
{

############ STACK_TRACE_BUILDER #####################
Function_Name="$0"
Function_PATH="${Function_PATH}/${Function_Name}"
######################################################
MSG_DISPLAY "Debug4" "Current Stack : [ ${Function_PATH} ] "
PKG_INSTALL_CTRL_Sourcing_PKG_CONF
MSG_DISPLAY "Info" "Needed PKG : [ None ] "
MSG_DISPLAY "Info" "Installing Package : [ ${PKG_XML} ] "

################## XML   #####################
Internet_Http_Get "${URL_XML}" "${PKG_XML}.${Pkg_ext_tgz}"  "${PWD_DLW_PKG}" ""
if [ "${EXTERNAL_ONLY_GET}" = "True" ]
   then
       MSG_DISPLAY "Info" "Get only Package : [ ${PKG_XML} ] "
   else
       archive_file_extract_tgz "${PWD_DLW_PKG}" "${PKG_XML}" "${Pkg_ext_tgz}"
       Base_Compile_OutPut_Redirector="${Prefix_Log_File}_${0}_$(date +%d_%m_%y).log"
       Base_Param_type_PKG="STD"
       Base_Param_PKG_To_Compile="${PKG_XML}"
       Base_Param_Compile_Options="--prefix=${BASE_PATH_XML}  --with-zlib=${BASE_PATH_ZLIB}"
       Base_Param_PKG_To_Compile_Option_Path=""
       Base_Param_Make_Options="Dummy"
       Base_Param_Make_Install_Options="Dummy"
       Base_Param_Make_clean="TRUE"
       Base_Param_Post_Compile_Action="COMPILE_Magic_linker"
       Base_Param_PKG_to_link=${Base_Param_PKG_To_Compile}
       Base_INTRA_DIRS="${BASE_PATH_XML}"
       COMPILE_Generics_Base_func
fi

############### Stack_TRACE_BUILDER ################
Function_PATH="$( dirname ${Function_PATH} )"
####################################################
}


Sourced_OK="1"

