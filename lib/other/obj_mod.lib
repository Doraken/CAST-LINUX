###############################################################################
# Obj_Mod.lib                                             Version : 1..1.2.2  #
#                                                                             #
# Creation Date : 31/10/2006                                                  #
# Team          : Chaos Engineers Teams for fully automated systems           #
# Support mail  : doraken@draken.net                                          #
# Author        : Arnaud Crampet                                              #
#                                                                             #
# Subject : This library provide base keywords getting function and runtime   #
#                                                                             #
###############################################################################
####
# INFO 



function Basic_Keywords_get
{
#|# Base_Keyword_To_Get    :  use this var to set which keyword to search for  
#|# Base_Keyword_Markup    :  use this var to set wich markup is used to fiund keyword
#|# Base_File_for_Search   :  use this var to set in wich file to search
#|# Base_Keyword_File_dest :  use this var to set in wich file we print all keywords 
#|# Keywords_Rec           :  This var is used to recieve result of the search
#|# 
############ STACK_TRACE_BUILDER #####################
Function_Name="${0}"
Function_PATH="${Function_PATH}/${Function_Name}"
######################################################
MsgStack
MSG_DISPLAY "Debug2" "getting value for : [ ${Base_Keyword_To_Get} ] "
Keyword_Rec=$(cat ${Base_File_for_Search} | grep ${Base_Keyword_Markup}) 
MSG_DISPLAY "Debug2" "value : [ ${Keyword_Rec} ] "

echo "${Base_Keyword_To_Get}=${Keyword_Rec}" >> ${Base_Keyword_File_dest}

############### Stack_TRACE_BUILDER ################
Function_PATH="$( dirname ${Function_PATH} )"
#################################################### 
} 


function keyword_TXT_refiner
{ 
#|# this function put all OM data into BDD format for bulk OM IMPORT
#|# Base_MASS_Keyword_Get_FILE    :  use this var to set which keyword to search for  
#|# Base_keymap_File              :  use this var to set wich markup is used to fiund keyword
#|# Base_File_for_Search   :  use this var to set in wich file to search
#|# Base_Keyword_File_dest :  use this var to set in wich file we print all keywords 
#|# Keywords_Rec           :  This var is used to recieve result of the search
#|# 
############ STACK_TRACE_BUILDER #####################
Function_Name="${0}"
Function_PATH="${Function_PATH}/${Function_Name}"
######################################################
  #Variables locales
  typeset keywordValues_file keywordValues_type FIFO
  typeset MASS_infras_keywords="[{][^}]*[}]" MASS_notrequired_keywords="[?][^?]*[?]" MASS_REQUIRED_keywords="[@][^@]*[@]"

  : >${Base_MASS_Keyword_Get_FILE}
  for keywordValues_file in $(cd ${Base_Cvs_TempDir}; find MDSP/INFRA -name keywordValues.txt); do
  {
    #Delete the lines begin with '#'
    #Delete blank lines with '#'
    #Delete the blank lines
    #Add $(dirname $keywordValues_file) to begin line

    OIFS=${IFS} IFS="/"
    set -- $(dirname "${keywordValues_file}")
    IFS=${OIFS}

    sed -e "/^#/d"		\
        -e "/^[[:blank:]]*#/d"	\
        -e "/^[[:blank:]]*$/d"	\
        -e "s/^/^$2^$3^$4^$5^$6^$7^$8^/" ${Base_Cvs_TempDir}/${keywordValues_file}
    print --			#The keywordValues.txt is malformated
                                #Add a return, the next sed sub this return
  } | sed -e "/^$/d" >>${Base_MASS_Keyword_Get_FILE}
  done

  #Limite la visibilite aux fichiers MASS_infras_keywords MASS_notrequired_keywords MASS_REQUIRED_keywords
  for keywordValues_type in MASS_infras_keywords MASS_notrequired_keywords MASS_REQUIRED_keywords; do
    eval sed -ne "/\$${keywordValues_type}=/p" ${Base_MASS_Keyword_Get_FILE} >${Base_Cvs_TempDir}/${keywordValues_type} &
  done
  wait

  #identify the 'strange' lines
  join -v2 <(sort ${Base_Cvs_TempDir}/MASS_infras_keywords		\
                  ${Base_Cvs_TempDir}/MASS_REQUIRED_keywords		\
                  ${Base_Cvs_TempDir}/MASS_notrequired_keywords)	\
           <(sort ${Base_MASS_Keyword_Get_FILE}) |&

  exec 9>${Function_Name}.log
  MSG_DISPLAY "Debug2" "Log file : ${Function_Name}.log"

  print -u9 -- "keywordValue incorrect:"
  cpt_keyValue=0
  while read -p line; do
    cpt_keyValue=$((cpt_keyValue+1))

    print -u9 -- "  $line"
  done
  print -u9 -- "keywordValue incorrect: total [${cpt_keyValue}]"

  print -u9 -- "keywordValue duplicate:"
  #Chargement de la table
  CVS_BRANCH=$(cat ${Base_Cvs_TempDir}/CVS_BRANCH)

  TMPFILE=$(tempfile -m 0644 -d ${Base_Dir_Scripts_Tmp})
  sed -e 's/=/^/' -e 's/$/^/' ${Base_Cvs_TempDir}/MASS_{infras_keywords,REQUIRED_keywords,notrequired_keywords} |\
    sort | sed -e "s/$/${CVS_BRANCH}^/" >${TMPFILE} 

  cp ${TMPFILE}  /tmp/totototo
  cat <<EOF
LOAD DATA INFILE "${TMPFILE}" REPLACE INTO TABLE     ARPCOM_OM_IMPORT FIELDS TERMINATED BY '^' LINES TERMINATED BY '^\n';
CREATE	  TABLE IF NOT EXISTS TMP_ARPCOM_OM_IMPORT AS SELECT * FROM ARPCOM_OM_IMPORT WHERE 1=2;
TRUNCATE  TABLE TMP_ARPCOM_OM_IMPORT;
LOAD DATA INFILE "${TMPFILE}"         INTO TABLE TMP_ARPCOM_OM_IMPORT FIELDS TERMINATED BY '^' LINES TERMINATED BY '^\n';
EOF
  perl ${Base_Dir_Scripts_Bin}/APIBDD.pl SQL <<EOF
LOAD DATA INFILE "${TMPFILE}" REPLACE INTO TABLE     ARPCOM_OM_IMPORT FIELDS TERMINATED BY '^' LINES TERMINATED BY '^\n';
CREATE	  TABLE IF NOT EXISTS TMP_ARPCOM_OM_IMPORT AS SELECT * FROM ARPCOM_OM_IMPORT WHERE 1=2;
TRUNCATE  TABLE TMP_ARPCOM_OM_IMPORT;
LOAD DATA INFILE "${TMPFILE}"         INTO TABLE TMP_ARPCOM_OM_IMPORT FIELDS TERMINATED BY '^' LINES TERMINATED BY '^\n';
EOF

  perl ${Base_Dir_Scripts_Bin}/APIBDD.pl SELECT >&9 <<EOF
SELECT	count(*) AS nb, concat(keywords_root_path, "/",keywords_level1_PATH,"/",keywords_level2_PATH, "/",keywords_level3_PATH,"/",keywords_level4_PATH, "/",keywords_level5_PATH,"/",keywords_level6_PATH, "/keywordValues.txt") AS "keywordValues.txt", Keyword_Name FROM	TMP_ARPCOM_OM_IMPORT GROUP BY keywords_root_path, keywords_level1_PATH, keywords_level2_PATH, keywords_level3_PATH, keywords_level4_PATH, keywords_level5_PATH, keywords_level6_PATH, Keyword_Name HAVING	nb>1;
EOF

  perl ${Base_Dir_Scripts_Bin}/APIBDD.pl SQL <<EOF
DROP TABLE TMP_ARPCOM_OM_IMPORT;
EOF

  wait
  exec 9>&-
  cat ${Function_Name}.log

  rm ${TMPFILE}

############### Stack_TRACE_BUILDER ################
Function_PATH="$( dirname ${Function_PATH} )"
#################################################### 
}


function Counted_rules
{
#|# this function Gather keywords in text files for numeroted tules 
#|# Base_Keywords_Name : Use this var to set basename of numeroted Keywords ( like @rules."number"@ ) 

############ STACK_TRACE_BUILDER #####################
Function_Name="${0}"
Function_PATH="${Function_PATH}/${Function_Name}"
######################################################
MsgStack
Empty_Var_Control "${Base_Keywords_Name}" "Base_Keywords_Name" "ErrorN" "1"

MSG_DISPLAY "Debug2" "Generating Proxy Rules for Configuration instance  : [ ${Instance} ] "
for Proxys in `cat  ${Path_To_Conf}/${Instance}| grep -w Proxy | egrep -v \# |awk '{ print  $1 "|"  $2 "|"  $3 }' ` 
   do Counter=`expr ${Counter} + 1 `
      Destination_dns=`echo ${Proxys} | awk -F\| '{ print $3 }' | awk -F\/ '{ print $3 } ' `
      echo -n "?Proxy.instance.rules.line${Counter}?=" >> ${Export_conf}
      if [ "${Destination_dns}" = "${Webseal_INFO}" ]
         then
             echo ${Proxys} | awk -F\| '{ print $1 " " $2 "  http://@Proxy.instance.webseal.vip@:@Proxy.instance.webseal.port@" $2 " @Proxy.instance.uri@"  }'  >> ${Export_conf}
         else  
             echo  ${Proxys} | awk -F\| '{ print $1 " " $2 " " $3 "  @Proxy.instance.uri@"  }' >> ${Export_conf}
      fi 
done
MSG_DISPLAY "Debug2" "Generating Proxy Rules : [ Done ] "

############### Stack_TRACE_BUILDER ################
Function_PATH="$( dirname ${Function_PATH} )"
#################################################### 
}	

Sourced_OK="1"
